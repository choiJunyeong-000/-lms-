{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIG60309\\\\react-client\\\\src\\\\components\\\\student\\\\Survey\\\\GeneralSurvey.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GeneralSurvey({\n  onComplete\n}) {\n  _s();\n  const navigate = useNavigate();\n  const [groupedSurveys, setGroupedSurveys] = useState({});\n  const [selectedSurveyType, setSelectedSurveyType] = useState(null);\n  const [selectedTitleGroup, setSelectedTitleGroup] = useState(null); // 제목 그룹 선택 상태\n  const [responses, setResponses] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [memberId, setMemberId] = useState(null);\n  const token = useMemo(() => localStorage.getItem(\"token\"), []);\n  const surveyTypeNames = {\n    \"GENERAL_SURVEY\": \"정기 설문조사\",\n    \"MEAL_SURVEY\": \"정기 급식 만족도\",\n    \"ACADEMIC_SURVEY\": \"정기 학교 설문\"\n  };\n\n  // 사용자 정보 가져오기\n  useEffect(() => {\n    if (!token) {\n      setError(\"로그인이 필요합니다.\");\n      setLoading(false);\n      return;\n    }\n    const fetchUserInfo = async () => {\n      try {\n        const response = await axios.get('http://localhost:8090/api/users/me', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setMemberId(response.data.id);\n      } catch (error) {\n        alert(\"사용자 정보를 불러올 수 없습니다. 다시 로그인해주세요.\");\n        navigate('/login');\n      }\n    };\n    fetchUserInfo();\n  }, [token, navigate]);\n\n  // 설문 데이터 가져와서 \"제목\"별로 그룹화\n  useEffect(() => {\n    if (!token || !memberId) return;\n    const fetchSurveys = async () => {\n      try {\n        const response = await axios.get('http://localhost:8090/api/surveys', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log(\"survey data:\", response.data);\n        const grouped = response.data.reduce((acc, survey) => {\n          // 특정 surveyType 제외 (필요시 조건 수정)\n          if (survey.surveyType === \"LECTURE_EVALUATION\" || survey.surveyType === \"TEAM_EVALUATION\") {\n            return acc;\n          }\n          // surveyType 키가 없으면 초기화\n          if (!acc[survey.surveyType]) {\n            acc[survey.surveyType] = {};\n          }\n          // 제목을 그룹 키로 사용 (없으면 \"제목없음\")\n          const titleKey = survey.title || \"제목없음\";\n          if (!acc[survey.surveyType][titleKey]) {\n            acc[survey.surveyType][titleKey] = [];\n          }\n          acc[survey.surveyType][titleKey].push(survey);\n          return acc;\n        }, {});\n        setGroupedSurveys(grouped);\n        setLoading(false);\n      } catch (error) {\n        setError(\"설문 데이터를 불러오는 중 오류가 발생했습니다.\");\n        setLoading(false);\n      }\n    };\n    fetchSurveys();\n  }, [token, memberId]);\n\n  // 설문 유형 선택 시\n  const handleSelectSurveyType = surveyType => {\n    setSelectedSurveyType(surveyType);\n    setSelectedTitleGroup(null); // 그룹 목록 보기 상태로 전환\n    setResponses({});\n  };\n\n  // \"제목\" 그룹(설문 목록) 선택 시\n  const handleSelectTitleGroup = groupKey => {\n    setSelectedTitleGroup(groupKey);\n    setResponses({});\n  };\n\n  // 제출 처리 (선택한 그룹의 설문만 처리)\n  const handleSubmit = async () => {\n    const currentGroupSurveys = groupedSurveys[selectedSurveyType][selectedTitleGroup];\n    // 모든 문항에 응답했는지 확인\n    if (Object.keys(responses).length !== currentGroupSurveys.length) {\n      alert(\"모든 질문에 답변해야 합니다!\");\n      return;\n    }\n\n    // 중복 체크\n    for (let [questionId] of Object.entries(responses)) {\n      try {\n        await axios.post(\"http://localhost:8090/api/survey-responses/check\", {\n          surveyId: questionId,\n          memberId: memberId\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      } catch (error) {\n        if (error.response && error.response.status === 400) {\n          alert(error.response.data);\n          return;\n        } else {\n          alert(\"중복 체크 중 오류가 발생했습니다.\");\n          return;\n        }\n      }\n    }\n\n    // 제출 요청\n    const requestData = {\n      memberId: memberId,\n      responses: Object.entries(responses).map(([questionId, response]) => ({\n        surveyId: questionId,\n        response: response\n      }))\n    };\n    try {\n      await axios.post(\"http://localhost:8090/api/survey-responses/submit\", requestData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setSubmitted(true);\n      alert(\"✅ 설문이 성공적으로 제출되었습니다!\");\n      if (onComplete) onComplete();\n    } catch (error) {\n      alert(\"설문 제출 중 오류가 발생했습니다.\");\n    }\n  };\n\n  // 설문 유형 목록으로 돌아가기\n  const handleBackToSurveyType = () => {\n    setSelectedSurveyType(null);\n    setSelectedTitleGroup(null);\n    setResponses({});\n  };\n\n  // \"제목\" 그룹(설문 목록) 화면으로 돌아가기\n  const handleBackToGroupList = () => {\n    setSelectedTitleGroup(null);\n    setResponses({});\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\uD83D\\uDCE1 \\uC124\\uBB38 \\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"error-message\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 21\n  }, this);\n  if (submitted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uD83C\\uDF89 \\uC124\\uBB38\\uC774 \\uC81C\\uCD9C\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4! \\uAC10\\uC0AC\\uD569\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToSurveyType,\n        children: \"\\uC124\\uBB38 \\uC720\\uD615 \\uBAA9\\uB85D\\uC73C\\uB85C \\uB3CC\\uC544\\uAC00\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 설문 유형 선택 화면\n  if (!selectedSurveyType) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"survey-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uC124\\uBB38 \\uC720\\uD615 \\uC120\\uD0DD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), Object.keys(groupedSurveys).map(type => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [surveyTypeNames[type] || type, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectSurveyType(type),\n          children: \"\\uC124\\uBB38 \\uC120\\uD0DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)]\n      }, type, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 선택한 설문 유형 내 \"제목\" 그룹(설문 목록) 화면\n  if (selectedSurveyType && !selectedTitleGroup) {\n    const groupKeys = Object.keys(groupedSurveys[selectedSurveyType]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"survey-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [surveyTypeNames[selectedSurveyType] || selectedSurveyType, \" \\uC124\\uBB38 \\uBAA9\\uB85D\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: groupKeys.map(groupKey => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [groupKey, \" (\", groupedSurveys[selectedSurveyType][groupKey].length, \"\\uBB38\\uD56D)\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSelectTitleGroup(groupKey),\n            children: \"\\uD574\\uB2F9 \\uC124\\uBB38 \\uC2DC\\uC791\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this)]\n        }, groupKey, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToSurveyType,\n        children: \"\\uC124\\uBB38 \\uC720\\uD615 \\uBAA9\\uB85D\\uC73C\\uB85C \\uB3CC\\uC544\\uAC00\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 선택한 \"제목\" 그룹의 설문 질문 화면\n  if (selectedSurveyType && selectedTitleGroup) {\n    const currentGroupSurveys = groupedSurveys[selectedSurveyType][selectedTitleGroup];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"survey-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [surveyTypeNames[selectedSurveyType] || selectedSurveyType, \" \\uC124\\uBB38\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: selectedTitleGroup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), currentGroupSurveys.map(survey => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: survey.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: survey.options.split(',').map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: `question-${survey.id}`,\n              value: option,\n              checked: responses[survey.id] === option,\n              onChange: () => setResponses(prev => ({\n                ...prev,\n                [survey.id]: option\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this), option]\n          }, option, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)]\n      }, survey.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToGroupList,\n        children: \"\\uBAA9\\uB85D\\uC73C\\uB85C \\uB3CC\\uC544\\uAC00\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"\\uC81C\\uCD9C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this);\n  }\n  return null;\n}\n_s(GeneralSurvey, \"dgh1n0eVlvLpfonnHor+JIDcZr4=\", false, function () {\n  return [useNavigate];\n});\n_c = GeneralSurvey;\nexport default GeneralSurvey;\nvar _c;\n$RefreshReg$(_c, \"GeneralSurvey\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","useNavigate","jsxDEV","_jsxDEV","GeneralSurvey","onComplete","_s","navigate","groupedSurveys","setGroupedSurveys","selectedSurveyType","setSelectedSurveyType","selectedTitleGroup","setSelectedTitleGroup","responses","setResponses","submitted","setSubmitted","loading","setLoading","error","setError","memberId","setMemberId","token","localStorage","getItem","surveyTypeNames","fetchUserInfo","response","get","headers","Authorization","data","id","alert","fetchSurveys","console","log","grouped","reduce","acc","survey","surveyType","titleKey","title","push","handleSelectSurveyType","handleSelectTitleGroup","groupKey","handleSubmit","currentGroupSurveys","Object","keys","length","questionId","entries","post","surveyId","status","requestData","map","handleBackToSurveyType","handleBackToGroupList","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","type","groupKeys","options","split","option","name","value","checked","onChange","prev","_c","$RefreshReg$"],"sources":["C:/Users/BIG60309/react-client/src/components/student/Survey/GeneralSurvey.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction GeneralSurvey({ onComplete }) {\r\n  const navigate = useNavigate();\r\n  const [groupedSurveys, setGroupedSurveys] = useState({});\r\n  const [selectedSurveyType, setSelectedSurveyType] = useState(null);\r\n  const [selectedTitleGroup, setSelectedTitleGroup] = useState(null); // 제목 그룹 선택 상태\r\n  const [responses, setResponses] = useState({});\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const [memberId, setMemberId] = useState(null);\r\n  const token = useMemo(() => localStorage.getItem(\"token\"), []);\r\n\r\n  const surveyTypeNames = {\r\n    \"GENERAL_SURVEY\": \"정기 설문조사\",\r\n    \"MEAL_SURVEY\": \"정기 급식 만족도\",\r\n    \"ACADEMIC_SURVEY\": \"정기 학교 설문\"\r\n  };\r\n\r\n  // 사용자 정보 가져오기\r\n  useEffect(() => {\r\n    if (!token) {\r\n      setError(\"로그인이 필요합니다.\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    const fetchUserInfo = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8090/api/users/me', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        setMemberId(response.data.id);\r\n      } catch (error) {\r\n        alert(\"사용자 정보를 불러올 수 없습니다. 다시 로그인해주세요.\");\r\n        navigate('/login');\r\n      }\r\n    };\r\n    fetchUserInfo();\r\n  }, [token, navigate]);\r\n\r\n  // 설문 데이터 가져와서 \"제목\"별로 그룹화\r\n  useEffect(() => {\r\n    if (!token || !memberId) return;\r\n    const fetchSurveys = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8090/api/surveys', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        console.log(\"survey data:\", response.data);\r\n\r\n        const grouped = response.data.reduce((acc, survey) => {\r\n          // 특정 surveyType 제외 (필요시 조건 수정)\r\n          if (survey.surveyType === \"LECTURE_EVALUATION\" || survey.surveyType === \"TEAM_EVALUATION\") {\r\n            return acc;\r\n          }\r\n          // surveyType 키가 없으면 초기화\r\n          if (!acc[survey.surveyType]) {\r\n            acc[survey.surveyType] = {};\r\n          }\r\n          // 제목을 그룹 키로 사용 (없으면 \"제목없음\")\r\n          const titleKey = survey.title || \"제목없음\";\r\n          if (!acc[survey.surveyType][titleKey]) {\r\n            acc[survey.surveyType][titleKey] = [];\r\n          }\r\n          acc[survey.surveyType][titleKey].push(survey);\r\n          return acc;\r\n        }, {});\r\n        setGroupedSurveys(grouped);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(\"설문 데이터를 불러오는 중 오류가 발생했습니다.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchSurveys();\r\n  }, [token, memberId]);\r\n\r\n  // 설문 유형 선택 시\r\n  const handleSelectSurveyType = (surveyType) => {\r\n    setSelectedSurveyType(surveyType);\r\n    setSelectedTitleGroup(null); // 그룹 목록 보기 상태로 전환\r\n    setResponses({});\r\n  };\r\n\r\n  // \"제목\" 그룹(설문 목록) 선택 시\r\n  const handleSelectTitleGroup = (groupKey) => {\r\n    setSelectedTitleGroup(groupKey);\r\n    setResponses({});\r\n  };\r\n\r\n  // 제출 처리 (선택한 그룹의 설문만 처리)\r\n  const handleSubmit = async () => {\r\n    const currentGroupSurveys = groupedSurveys[selectedSurveyType][selectedTitleGroup];\r\n    // 모든 문항에 응답했는지 확인\r\n    if (Object.keys(responses).length !== currentGroupSurveys.length) {\r\n      alert(\"모든 질문에 답변해야 합니다!\");\r\n      return;\r\n    }\r\n  \r\n    // 중복 체크\r\n    for (let [questionId] of Object.entries(responses)) {\r\n      try {\r\n        await axios.post(\r\n          \"http://localhost:8090/api/survey-responses/check\",\r\n          { surveyId: questionId, memberId: memberId },\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n      } catch (error) {\r\n        if (error.response && error.response.status === 400) {\r\n          alert(error.response.data);\r\n          return;\r\n        } else {\r\n          alert(\"중복 체크 중 오류가 발생했습니다.\");\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  \r\n    // 제출 요청\r\n    const requestData = {\r\n      memberId: memberId,\r\n      responses: Object.entries(responses).map(([questionId, response]) => ({\r\n        surveyId: questionId,\r\n        response: response\r\n      }))\r\n    };\r\n  \r\n    try {\r\n      await axios.post(\"http://localhost:8090/api/survey-responses/submit\", requestData, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      setSubmitted(true);\r\n      alert(\"✅ 설문이 성공적으로 제출되었습니다!\");\r\n      if (onComplete) onComplete();\r\n    } catch (error) {\r\n      alert(\"설문 제출 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  // 설문 유형 목록으로 돌아가기\r\n  const handleBackToSurveyType = () => {\r\n    setSelectedSurveyType(null);\r\n    setSelectedTitleGroup(null);\r\n    setResponses({});\r\n  };\r\n\r\n  // \"제목\" 그룹(설문 목록) 화면으로 돌아가기\r\n  const handleBackToGroupList = () => {\r\n    setSelectedTitleGroup(null);\r\n    setResponses({});\r\n  };\r\n\r\n  if (loading) return <p>📡 설문 데이터를 불러오는 중...</p>;\r\n  if (error) return <p className=\"error-message\">{error}</p>;\r\n  if (submitted) {\r\n    return (\r\n      <div>\r\n        <p>🎉 설문이 제출되었습니다! 감사합니다.</p>\r\n        <button onClick={handleBackToSurveyType}>설문 유형 목록으로 돌아가기</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 설문 유형 선택 화면\r\n  if (!selectedSurveyType) {\r\n    return (\r\n      <div className=\"survey-container\">\r\n        <h2>설문 유형 선택</h2>\r\n        {Object.keys(groupedSurveys).map((type) => (\r\n          <li key={type}>\r\n            {surveyTypeNames[type] || type}{\" \"}\r\n            <button onClick={() => handleSelectSurveyType(type)}>설문 선택</button>\r\n          </li>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 선택한 설문 유형 내 \"제목\" 그룹(설문 목록) 화면\r\n  if (selectedSurveyType && !selectedTitleGroup) {\r\n    const groupKeys = Object.keys(groupedSurveys[selectedSurveyType]);\r\n    return (\r\n      <div className=\"survey-container\">\r\n        <h2>{surveyTypeNames[selectedSurveyType] || selectedSurveyType} 설문 목록</h2>\r\n        <ul>\r\n          {groupKeys.map((groupKey) => (\r\n            <li key={groupKey}>\r\n              {groupKey} ({groupedSurveys[selectedSurveyType][groupKey].length}문항)\r\n              <button onClick={() => handleSelectTitleGroup(groupKey)}>\r\n                해당 설문 시작\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <button onClick={handleBackToSurveyType}>설문 유형 목록으로 돌아가기</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 선택한 \"제목\" 그룹의 설문 질문 화면\r\n  if (selectedSurveyType && selectedTitleGroup) {\r\n    const currentGroupSurveys = groupedSurveys[selectedSurveyType][selectedTitleGroup];\r\n    return (\r\n      <div className=\"survey-container\">\r\n        <h2>{surveyTypeNames[selectedSurveyType] || selectedSurveyType} 설문</h2>\r\n        <h3>{selectedTitleGroup}</h3>\r\n        {currentGroupSurveys.map((survey) => (\r\n          <div key={survey.id}>\r\n            <p>{survey.title}</p>\r\n            <div>\r\n              {survey.options.split(',').map(option => (\r\n                <label key={option}>\r\n                  <input\r\n                    type=\"radio\"\r\n                    name={`question-${survey.id}`}\r\n                    value={option}\r\n                    checked={responses[survey.id] === option}\r\n                    onChange={() =>\r\n                      setResponses(prev => ({ ...prev, [survey.id]: option }))\r\n                    }\r\n                  />\r\n                  {option}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <button onClick={handleBackToGroupList}>목록으로 돌아가기</button>\r\n        <button onClick={handleSubmit}>제출</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport default GeneralSurvey;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,aAAaA,CAAC;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACrC,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACa,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACe,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACpE,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACuB,KAAK,EAAEC,QAAQ,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM2B,KAAK,GAAGzB,OAAO,CAAC,MAAM0B,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC;EAE9D,MAAMC,eAAe,GAAG;IACtB,gBAAgB,EAAE,SAAS;IAC3B,aAAa,EAAE,WAAW;IAC1B,iBAAiB,EAAE;EACrB,CAAC;;EAED;EACA7B,SAAS,CAAC,MAAM;IACd,IAAI,CAAC0B,KAAK,EAAE;MACVH,QAAQ,CAAC,aAAa,CAAC;MACvBF,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IACA,MAAMS,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAM7B,KAAK,CAAC8B,GAAG,CAAC,oCAAoC,EAAE;UACrEC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUR,KAAK;UAAG;QAC9C,CAAC,CAAC;QACFD,WAAW,CAACM,QAAQ,CAACI,IAAI,CAACC,EAAE,CAAC;MAC/B,CAAC,CAAC,OAAOd,KAAK,EAAE;QACde,KAAK,CAAC,iCAAiC,CAAC;QACxC5B,QAAQ,CAAC,QAAQ,CAAC;MACpB;IACF,CAAC;IACDqB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACJ,KAAK,EAAEjB,QAAQ,CAAC,CAAC;;EAErB;EACAT,SAAS,CAAC,MAAM;IACd,IAAI,CAAC0B,KAAK,IAAI,CAACF,QAAQ,EAAE;IACzB,MAAMc,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMP,QAAQ,GAAG,MAAM7B,KAAK,CAAC8B,GAAG,CAAC,mCAAmC,EAAE;UACpEC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUR,KAAK;UAAG;QAC9C,CAAC,CAAC;QACFa,OAAO,CAACC,GAAG,CAAC,cAAc,EAAET,QAAQ,CAACI,IAAI,CAAC;QAE1C,MAAMM,OAAO,GAAGV,QAAQ,CAACI,IAAI,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAK;UACpD;UACA,IAAIA,MAAM,CAACC,UAAU,KAAK,oBAAoB,IAAID,MAAM,CAACC,UAAU,KAAK,iBAAiB,EAAE;YACzF,OAAOF,GAAG;UACZ;UACA;UACA,IAAI,CAACA,GAAG,CAACC,MAAM,CAACC,UAAU,CAAC,EAAE;YAC3BF,GAAG,CAACC,MAAM,CAACC,UAAU,CAAC,GAAG,CAAC,CAAC;UAC7B;UACA;UACA,MAAMC,QAAQ,GAAGF,MAAM,CAACG,KAAK,IAAI,MAAM;UACvC,IAAI,CAACJ,GAAG,CAACC,MAAM,CAACC,UAAU,CAAC,CAACC,QAAQ,CAAC,EAAE;YACrCH,GAAG,CAACC,MAAM,CAACC,UAAU,CAAC,CAACC,QAAQ,CAAC,GAAG,EAAE;UACvC;UACAH,GAAG,CAACC,MAAM,CAACC,UAAU,CAAC,CAACC,QAAQ,CAAC,CAACE,IAAI,CAACJ,MAAM,CAAC;UAC7C,OAAOD,GAAG;QACZ,CAAC,EAAE,CAAC,CAAC,CAAC;QACNhC,iBAAiB,CAAC8B,OAAO,CAAC;QAC1BpB,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,QAAQ,CAAC,4BAA4B,CAAC;QACtCF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDiB,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACZ,KAAK,EAAEF,QAAQ,CAAC,CAAC;;EAErB;EACA,MAAMyB,sBAAsB,GAAIJ,UAAU,IAAK;IAC7ChC,qBAAqB,CAACgC,UAAU,CAAC;IACjC9B,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7BE,YAAY,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC;;EAED;EACA,MAAMiC,sBAAsB,GAAIC,QAAQ,IAAK;IAC3CpC,qBAAqB,CAACoC,QAAQ,CAAC;IAC/BlC,YAAY,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC;;EAED;EACA,MAAMmC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,mBAAmB,GAAG3C,cAAc,CAACE,kBAAkB,CAAC,CAACE,kBAAkB,CAAC;IAClF;IACA,IAAIwC,MAAM,CAACC,IAAI,CAACvC,SAAS,CAAC,CAACwC,MAAM,KAAKH,mBAAmB,CAACG,MAAM,EAAE;MAChEnB,KAAK,CAAC,kBAAkB,CAAC;MACzB;IACF;;IAEA;IACA,KAAK,IAAI,CAACoB,UAAU,CAAC,IAAIH,MAAM,CAACI,OAAO,CAAC1C,SAAS,CAAC,EAAE;MAClD,IAAI;QACF,MAAMd,KAAK,CAACyD,IAAI,CACd,kDAAkD,EAClD;UAAEC,QAAQ,EAAEH,UAAU;UAAEjC,QAAQ,EAAEA;QAAS,CAAC,EAC5C;UAAES,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUR,KAAK;UAAG;QAAE,CAClD,CAAC;MACH,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACd,IAAIA,KAAK,CAACS,QAAQ,IAAIT,KAAK,CAACS,QAAQ,CAAC8B,MAAM,KAAK,GAAG,EAAE;UACnDxB,KAAK,CAACf,KAAK,CAACS,QAAQ,CAACI,IAAI,CAAC;UAC1B;QACF,CAAC,MAAM;UACLE,KAAK,CAAC,qBAAqB,CAAC;UAC5B;QACF;MACF;IACF;;IAEA;IACA,MAAMyB,WAAW,GAAG;MAClBtC,QAAQ,EAAEA,QAAQ;MAClBR,SAAS,EAAEsC,MAAM,CAACI,OAAO,CAAC1C,SAAS,CAAC,CAAC+C,GAAG,CAAC,CAAC,CAACN,UAAU,EAAE1B,QAAQ,CAAC,MAAM;QACpE6B,QAAQ,EAAEH,UAAU;QACpB1B,QAAQ,EAAEA;MACZ,CAAC,CAAC;IACJ,CAAC;IAED,IAAI;MACF,MAAM7B,KAAK,CAACyD,IAAI,CAAC,mDAAmD,EAAEG,WAAW,EAAE;QACjF7B,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUR,KAAK;QAAG;MAC9C,CAAC,CAAC;MACFP,YAAY,CAAC,IAAI,CAAC;MAClBkB,KAAK,CAAC,sBAAsB,CAAC;MAC7B,IAAI9B,UAAU,EAAEA,UAAU,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOe,KAAK,EAAE;MACde,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC;;EAED;EACA,MAAM2B,sBAAsB,GAAGA,CAAA,KAAM;IACnCnD,qBAAqB,CAAC,IAAI,CAAC;IAC3BE,qBAAqB,CAAC,IAAI,CAAC;IAC3BE,YAAY,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC;;EAED;EACA,MAAMgD,qBAAqB,GAAGA,CAAA,KAAM;IAClClD,qBAAqB,CAAC,IAAI,CAAC;IAC3BE,YAAY,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC;EAED,IAAIG,OAAO,EAAE,oBAAOf,OAAA;IAAA6D,QAAA,EAAG;EAAoB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAC/C,IAAIhD,KAAK,EAAE,oBAAOjB,OAAA;IAAGkE,SAAS,EAAC,eAAe;IAAAL,QAAA,EAAE5C;EAAK;IAAA6C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAC1D,IAAIpD,SAAS,EAAE;IACb,oBACEb,OAAA;MAAA6D,QAAA,gBACE7D,OAAA;QAAA6D,QAAA,EAAG;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC7BjE,OAAA;QAAQmE,OAAO,EAAER,sBAAuB;QAAAE,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC;EAEV;;EAEA;EACA,IAAI,CAAC1D,kBAAkB,EAAE;IACvB,oBACEP,OAAA;MAAKkE,SAAS,EAAC,kBAAkB;MAAAL,QAAA,gBAC/B7D,OAAA;QAAA6D,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAChBhB,MAAM,CAACC,IAAI,CAAC7C,cAAc,CAAC,CAACqD,GAAG,CAAEU,IAAI,iBACpCpE,OAAA;QAAA6D,QAAA,GACGrC,eAAe,CAAC4C,IAAI,CAAC,IAAIA,IAAI,EAAE,GAAG,eACnCpE,OAAA;UAAQmE,OAAO,EAAEA,CAAA,KAAMvB,sBAAsB,CAACwB,IAAI,CAAE;UAAAP,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAF5DG,IAAI;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGT,CACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV;;EAEA;EACA,IAAI1D,kBAAkB,IAAI,CAACE,kBAAkB,EAAE;IAC7C,MAAM4D,SAAS,GAAGpB,MAAM,CAACC,IAAI,CAAC7C,cAAc,CAACE,kBAAkB,CAAC,CAAC;IACjE,oBACEP,OAAA;MAAKkE,SAAS,EAAC,kBAAkB;MAAAL,QAAA,gBAC/B7D,OAAA;QAAA6D,QAAA,GAAKrC,eAAe,CAACjB,kBAAkB,CAAC,IAAIA,kBAAkB,EAAC,4BAAM;MAAA;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1EjE,OAAA;QAAA6D,QAAA,EACGQ,SAAS,CAACX,GAAG,CAAEZ,QAAQ,iBACtB9C,OAAA;UAAA6D,QAAA,GACGf,QAAQ,EAAC,IAAE,EAACzC,cAAc,CAACE,kBAAkB,CAAC,CAACuC,QAAQ,CAAC,CAACK,MAAM,EAAC,eACjE,eAAAnD,OAAA;YAAQmE,OAAO,EAAEA,CAAA,KAAMtB,sBAAsB,CAACC,QAAQ,CAAE;YAAAe,QAAA,EAAC;UAEzD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAJFnB,QAAQ;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACLjE,OAAA;QAAQmE,OAAO,EAAER,sBAAuB;QAAAE,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC;EAEV;;EAEA;EACA,IAAI1D,kBAAkB,IAAIE,kBAAkB,EAAE;IAC5C,MAAMuC,mBAAmB,GAAG3C,cAAc,CAACE,kBAAkB,CAAC,CAACE,kBAAkB,CAAC;IAClF,oBACET,OAAA;MAAKkE,SAAS,EAAC,kBAAkB;MAAAL,QAAA,gBAC/B7D,OAAA;QAAA6D,QAAA,GAAKrC,eAAe,CAACjB,kBAAkB,CAAC,IAAIA,kBAAkB,EAAC,eAAG;MAAA;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvEjE,OAAA;QAAA6D,QAAA,EAAKpD;MAAkB;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAC5BjB,mBAAmB,CAACU,GAAG,CAAEnB,MAAM,iBAC9BvC,OAAA;QAAA6D,QAAA,gBACE7D,OAAA;UAAA6D,QAAA,EAAItB,MAAM,CAACG;QAAK;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrBjE,OAAA;UAAA6D,QAAA,EACGtB,MAAM,CAAC+B,OAAO,CAACC,KAAK,CAAC,GAAG,CAAC,CAACb,GAAG,CAACc,MAAM,iBACnCxE,OAAA;YAAA6D,QAAA,gBACE7D,OAAA;cACEoE,IAAI,EAAC,OAAO;cACZK,IAAI,EAAE,YAAYlC,MAAM,CAACR,EAAE,EAAG;cAC9B2C,KAAK,EAAEF,MAAO;cACdG,OAAO,EAAEhE,SAAS,CAAC4B,MAAM,CAACR,EAAE,CAAC,KAAKyC,MAAO;cACzCI,QAAQ,EAAEA,CAAA,KACRhE,YAAY,CAACiE,IAAI,KAAK;gBAAE,GAAGA,IAAI;gBAAE,CAACtC,MAAM,CAACR,EAAE,GAAGyC;cAAO,CAAC,CAAC;YACxD;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,EACDO,MAAM;UAAA,GAVGA,MAAM;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAWX,CACR;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA,GAjBE1B,MAAM,CAACR,EAAE;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAkBd,CACN,CAAC,eACFjE,OAAA;QAAQmE,OAAO,EAAEP,qBAAsB;QAAAC,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1DjE,OAAA;QAAQmE,OAAO,EAAEpB,YAAa;QAAAc,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAEV;EAEA,OAAO,IAAI;AACb;AAAC9D,EAAA,CAzOQF,aAAa;EAAA,QACHH,WAAW;AAAA;AAAAgF,EAAA,GADrB7E,aAAa;AA2OtB,eAAeA,aAAa;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}