{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIG60309\\\\react-client\\\\src\\\\components\\\\Message\\\\MessagePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport './MessagePage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst MessagePage = () => {\n  _s();\n  const [member, setMember] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [recipient, setRecipient] = useState(null);\n  const [members, setMembers] = useState([]);\n\n  // 로그인한 사용자 및 전체 멤버 조회\n  useEffect(() => {\n    async function fetchMemberData() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        const resMe = await axios.get('http://localhost:8090/api/users/me', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setMember(resMe.data);\n        const resMembers = await axios.get('http://localhost:8090/api/chat-members', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const otherMembers = resMembers.data.filter(m => m.studentId !== resMe.data.studentId);\n        setMembers(otherMembers);\n      } catch (error) {\n        console.error(\"🚨 멤버 정보를 불러오는 데 실패했습니다.\", error);\n      }\n    }\n    fetchMemberData();\n  }, []);\n\n  // 전체 메시지 조회\n  useEffect(() => {\n    async function fetchMessages() {\n      if (!member) return;\n      try {\n        const token = localStorage.getItem(\"token\");\n        const response = await axios.get(`http://localhost:8090/api/chat/messages/${member.studentId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log(\"서버에서 받은 메시지:\", response.data);\n        setMessages(response.data);\n      } catch (error) {\n        console.error(\"🚨 채팅 내역을 불러오지 못했습니다.\", error);\n      }\n    }\n    fetchMessages();\n  }, [member]);\n\n  // 실시간 메시지 수신\n  useEffect(() => {\n    const handleMessageReceive = msg => {\n      setMessages(prev => {\n        if (prev.some(m => m.id === msg.id)) {\n          console.warn(\"⚠️ 중복 메시지 감지 - 추가 안 함\", msg);\n          return prev;\n        }\n        return [...prev, msg];\n      });\n    };\n    socket.on('chat message', handleMessageReceive);\n    return () => socket.off('chat message', handleMessageReceive);\n  }, []);\n\n  // 실시간 읽음 이벤트 수신 (송신자 측)\n  useEffect(() => {\n    const handleReadMessage = ({\n      messageId,\n      readerId\n    }) => {\n      console.log(\"읽음 이벤트 수신:\", messageId, readerId);\n      setMessages(prev => prev.map(m => String(m.id) === String(messageId) ? {\n        ...m,\n        read: true\n      } : m));\n    };\n    socket.on('read message', handleReadMessage);\n    return () => socket.off('read message', handleReadMessage);\n  }, []);\n\n  // 메시지 전송 (엔터키 포함)\n  const handleSend = async () => {\n    const trimmedText = inputText.trim();\n    if (!trimmedText || !recipient || !member) return;\n    const newMsg = {\n      sender: member.studentId,\n      recipient: recipient.studentId,\n      content: trimmedText\n    };\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await axios.post(\"http://localhost:8090/api/chat/send\", newMsg, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setMessages(prev => [...prev, {\n        ...response.data,\n        id: response.data.id || uuidv4()\n      }]);\n      socket.emit('chat message', response.data);\n      setInputText('');\n    } catch (error) {\n      console.error(\"🚨 메시지 전송 실패\", error);\n    }\n  };\n\n  // 선택된 대화 상대와 관련된 메시지만 필터링\n  const conversationMessages = messages.filter(msg => {\n    if (!member || !recipient) return false;\n    return msg.sender === member.studentId && msg.recipient === recipient.studentId || msg.sender === recipient.studentId && msg.recipient === member.studentId;\n  });\n\n  // 수신자 입장에서, 메시지를 읽었을 때 처리하는 함수\n  const markMessageAsRead = msg => {\n    if (!member || !recipient) return;\n    const token = localStorage.getItem(\"token\");\n    axios.post(`http://localhost:8090/api/chat/messages/read/${msg.id}`, null, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(() => {\n      setMessages(prev => prev.map(m => m.id === msg.id ? {\n        ...m,\n        read: true\n      } : m));\n      socket.emit('read message', {\n        messageId: msg.id,\n        readerId: member.studentId\n      });\n    }).catch(error => console.error(\"읽음 처리 실패\", error));\n  };\n\n  // 수신자 입장에서, 대화창 열릴 때 자동으로 읽음 처리\n  useEffect(() => {\n    if (!member || !recipient) return;\n    conversationMessages.forEach(msg => {\n      if (msg.sender !== member.studentId && !msg.read) {\n        markMessageAsRead(msg);\n      }\n    });\n  }, [member, recipient, conversationMessages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-page-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contact-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uCABD\\uC9C0\\uD568\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), members.map(m => {\n          const unreadCount = messages.filter(msg => msg.sender === m.studentId && !msg.read).length;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `contact-item ${recipient && recipient.studentId === m.studentId ? 'selected' : ''}`,\n            onClick: () => setRecipient(m),\n            children: [m.name, unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"unread-badge\",\n              children: unreadCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 37\n            }, this)]\n          }, m.studentId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: member && recipient ? `${member.name}과 ${recipient.name}의 대화` : \"대화를 선택하세요\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: conversationMessages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `chat-message ${msg.sender === (member === null || member === void 0 ? void 0 : member.studentId) ? 'sent' : 'received'}`,\n            children: [msg.sender === (member === null || member === void 0 ? void 0 : member.studentId) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"read-status\",\n              children: msg.read ? '읽음' : '안읽음'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-content\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: msg.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"timestamp\",\n              children: msg.timestamp ? new Date(msg.timestamp).toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n              }) : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this)]\n          }, msg.id || uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: inputText,\n            onChange: e => setInputText(e.target.value),\n            onKeyDown: e => {\n              if (e.key === 'Enter') {\n                e.preventDefault();\n                handleSend();\n              }\n            },\n            placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSend,\n            children: \"\\uC804\\uC1A1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(MessagePage, \"QGWgbvWWcqOcf2qQKUiv1bqHN+U=\");\n_c = MessagePage;\nexport default MessagePage;\nvar _c;\n$RefreshReg$(_c, \"MessagePage\");","map":{"version":3,"names":["React","useState","useEffect","io","axios","v4","uuidv4","jsxDEV","_jsxDEV","socket","MessagePage","_s","member","setMember","messages","setMessages","inputText","setInputText","recipient","setRecipient","members","setMembers","fetchMemberData","token","localStorage","getItem","resMe","get","headers","Authorization","data","resMembers","otherMembers","filter","m","studentId","error","console","fetchMessages","response","log","handleMessageReceive","msg","prev","some","id","warn","on","off","handleReadMessage","messageId","readerId","map","String","read","handleSend","trimmedText","trim","newMsg","sender","content","post","emit","conversationMessages","markMessageAsRead","then","catch","forEach","className","children","fileName","_jsxFileName","lineNumber","columnNumber","unreadCount","length","onClick","name","timestamp","Date","toLocaleTimeString","hour","minute","type","value","onChange","e","target","onKeyDown","key","preventDefault","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/BIG60309/react-client/src/components/Message/MessagePage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './MessagePage.css';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst MessagePage = () => {\r\n  const [member, setMember] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [recipient, setRecipient] = useState(null);\r\n  const [members, setMembers] = useState([]);\r\n\r\n  // 로그인한 사용자 및 전체 멤버 조회\r\n  useEffect(() => {\r\n    async function fetchMemberData() {\r\n      try {\r\n        const token = localStorage.getItem(\"token\");\r\n        const resMe = await axios.get('http://localhost:8090/api/users/me', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        setMember(resMe.data);\r\n\r\n        const resMembers = await axios.get('http://localhost:8090/api/chat-members', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        const otherMembers = resMembers.data.filter(m => m.studentId !== resMe.data.studentId);\r\n        setMembers(otherMembers);\r\n      } catch (error) {\r\n        console.error(\"🚨 멤버 정보를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    }\r\n    fetchMemberData();\r\n  }, []);\r\n\r\n  // 전체 메시지 조회\r\n  useEffect(() => {\r\n    async function fetchMessages() {\r\n      if (!member) return;\r\n      try {\r\n        const token = localStorage.getItem(\"token\");\r\n        const response = await axios.get(`http://localhost:8090/api/chat/messages/${member.studentId}`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        console.log(\"서버에서 받은 메시지:\", response.data);\r\n        setMessages(response.data);\r\n      } catch (error) {\r\n        console.error(\"🚨 채팅 내역을 불러오지 못했습니다.\", error);\r\n      }\r\n    }\r\n    fetchMessages();\r\n  }, [member]);\r\n  \r\n  // 실시간 메시지 수신\r\n  useEffect(() => {\r\n    const handleMessageReceive = (msg) => {\r\n      setMessages(prev => {\r\n        if (prev.some(m => m.id === msg.id)) {\r\n          console.warn(\"⚠️ 중복 메시지 감지 - 추가 안 함\", msg);\r\n          return prev;\r\n        }\r\n        return [...prev, msg];\r\n      });\r\n    };\r\n\r\n    socket.on('chat message', handleMessageReceive);\r\n    return () => socket.off('chat message', handleMessageReceive);\r\n  }, []);\r\n\r\n  // 실시간 읽음 이벤트 수신 (송신자 측)\r\n  useEffect(() => {\r\n    const handleReadMessage = ({ messageId, readerId }) => {\r\n      console.log(\"읽음 이벤트 수신:\", messageId, readerId);\r\n      setMessages(prev =>\r\n        prev.map(m => String(m.id) === String(messageId) ? { ...m, read: true } : m)\r\n      );\r\n    };\r\n\r\n    socket.on('read message', handleReadMessage);\r\n    return () => socket.off('read message', handleReadMessage);\r\n  }, []);\r\n\r\n  // 메시지 전송 (엔터키 포함)\r\n  const handleSend = async () => {\r\n    const trimmedText = inputText.trim();\r\n    if (!trimmedText || !recipient || !member) return;\r\n    const newMsg = {\r\n      sender: member.studentId,\r\n      recipient: recipient.studentId,\r\n      content: trimmedText\r\n    };\r\n\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      const response = await axios.post(\"http://localhost:8090/api/chat/send\", newMsg, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      setMessages(prev => [...prev, { ...response.data, id: response.data.id || uuidv4() }]);\r\n      socket.emit('chat message', response.data);\r\n      setInputText('');\r\n    } catch (error) {\r\n      console.error(\"🚨 메시지 전송 실패\", error);\r\n    }\r\n  };\r\n\r\n  // 선택된 대화 상대와 관련된 메시지만 필터링\r\n  const conversationMessages = messages.filter(msg => {\r\n    if (!member || !recipient) return false;\r\n    return (\r\n      (msg.sender === member.studentId && msg.recipient === recipient.studentId) ||\r\n      (msg.sender === recipient.studentId && msg.recipient === member.studentId)\r\n    );\r\n  });\r\n\r\n  // 수신자 입장에서, 메시지를 읽었을 때 처리하는 함수\r\n  const markMessageAsRead = (msg) => {\r\n    if (!member || !recipient) return;\r\n    const token = localStorage.getItem(\"token\");\r\n    axios.post(`http://localhost:8090/api/chat/messages/read/${msg.id}`, null, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    })\r\n    .then(() => {\r\n      setMessages(prev =>\r\n        prev.map(m => m.id === msg.id ? { ...m, read: true } : m)\r\n      );\r\n      socket.emit('read message', { messageId: msg.id, readerId: member.studentId });\r\n    })\r\n    .catch(error => console.error(\"읽음 처리 실패\", error));\r\n  };\r\n\r\n  // 수신자 입장에서, 대화창 열릴 때 자동으로 읽음 처리\r\n  useEffect(() => {\r\n    if (!member || !recipient) return;\r\n    conversationMessages.forEach(msg => {\r\n      if (msg.sender !== member.studentId && !msg.read) {\r\n        markMessageAsRead(msg);\r\n      }\r\n    });\r\n  }, [member, recipient, conversationMessages]);\r\n\r\n  return (\r\n    <div className=\"message-page-container\">\r\n      <div className=\"chat-container\">\r\n        {/* 좌측: 연락처 목록 */}\r\n        <div className=\"contact-list\">\r\n          <h3>쪽지함</h3>\r\n          {members.map(m => {\r\n            const unreadCount = messages.filter(msg => \r\n              msg.sender === m.studentId && !msg.read\r\n            ).length;\r\n            return (\r\n              <div \r\n                key={m.studentId}\r\n                className={`contact-item ${recipient && recipient.studentId === m.studentId ? 'selected' : ''}`}\r\n                onClick={() => setRecipient(m)}\r\n              >\r\n                {m.name}\r\n                {unreadCount > 0 && <span className=\"unread-badge\">{unreadCount}</span>}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        {/* 우측: 채팅 영역 */}\r\n        <div className=\"chat-area\">\r\n          <div className=\"chat-header\">\r\n            {member && recipient ? `${member.name}과 ${recipient.name}의 대화` : \"대화를 선택하세요\"}\r\n          </div>\r\n          <div className=\"chat-messages\">\r\n            {conversationMessages.map(msg => (\r\n              <div key={msg.id || uuidv4()} className={`chat-message ${msg.sender === member?.studentId ? 'sent' : 'received'}`}>\r\n                {msg.sender === member?.studentId && (\r\n                  <div className=\"read-status\">\r\n                    {msg.read ? '읽음' : '안읽음'}\r\n                  </div>\r\n                )}\r\n                <div className=\"message-content\">\r\n                  <span>{msg.content}</span>\r\n                </div>\r\n                <div className=\"timestamp\">\r\n                  {msg.timestamp ? new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"chat-input\">\r\n            <input\r\n              type=\"text\"\r\n              value={inputText}\r\n              onChange={e => setInputText(e.target.value)}\r\n              onKeyDown={e => {\r\n                if (e.key === 'Enter') {\r\n                  e.preventDefault();\r\n                  handleSend();\r\n                }\r\n              }}\r\n              placeholder=\"메시지를 입력하세요...\"\r\n            />\r\n            <button onClick={handleSend}>전송</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessagePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}