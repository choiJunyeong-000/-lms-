{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIG60309\\\\react-client\\\\src\\\\components\\\\StudentAttendance.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentAttendance = () => {\n  _s();\n  const [attendanceData, setAttendanceData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [studentId, setStudentId] = useState(null); // studentId 상태 추가\n  const [token, setToken] = useState(null); // token 상태 추가\n\n  useEffect(() => {\n    const storedStudentId = localStorage.getItem(\"studentId\");\n    const storedToken = localStorage.getItem(\"token\");\n    console.log(\"Stored studentId:\", storedStudentId); // 확인\n    console.log(\"Stored token:\", storedToken); // 확인\n\n    if (storedStudentId) {\n      setStudentId(storedStudentId);\n    } else {\n      console.error(\"studentId가 로컬 스토리지에 없습니다.\");\n    }\n    if (storedToken) {\n      setToken(storedToken);\n    } else {\n      console.error(\"token이 로컬 스토리지에 없습니다.\");\n    }\n  }, []);\n  useEffect(() => {\n    const fetchAttendance = async () => {\n      if (!studentId || !token) {\n        console.error(\"로그인이 필요하거나 studentId가 없습니다.\");\n        return;\n      }\n      try {\n        const response = await axios.get(`http://localhost:8090/api/attendance/student`, {\n          params: {\n            studentId\n          },\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // 응답이 배열인지 확인 후 설정\n        if (Array.isArray(response.data)) {\n          setAttendanceData(response.data);\n        } else {\n          console.error(\"출석 데이터가 배열 형식이 아닙니다.\");\n          setAttendanceData([]); // 빈 배열로 설정\n        }\n      } catch (error) {\n        console.error(\"출석 데이터를 불러오는 중 오류 발생:\", error);\n        setAttendanceData([]); // 오류 발생 시 빈 배열로 설정\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // studentId와 token이 모두 설정되었을 때만 fetchAttendance 호출\n    if (studentId && token) {\n      fetchAttendance();\n    }\n  }, [studentId, token]); // studentId, token 변경 시마다 API 호출\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }, this);\n  }\n  if (!attendanceData || attendanceData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uCD9C\\uC11D \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: attendanceData.map((attendance, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uCD9C\\uC11D \\uC815\\uBCF4: \", attendance.someField]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), \" \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(StudentAttendance, \"ZemH7DRV50hETy9PL4xcbTA5YuE=\");\n_c = StudentAttendance;\nexport default StudentAttendance;\nvar _c;\n$RefreshReg$(_c, \"StudentAttendance\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","StudentAttendance","_s","attendanceData","setAttendanceData","loading","setLoading","studentId","setStudentId","token","setToken","storedStudentId","localStorage","getItem","storedToken","console","log","error","fetchAttendance","response","get","params","headers","Authorization","Array","isArray","data","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","attendance","index","someField","_c","$RefreshReg$"],"sources":["C:/Users/BIG60309/react-client/src/components/StudentAttendance.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst StudentAttendance = () => {\r\n  const [attendanceData, setAttendanceData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [studentId, setStudentId] = useState(null); // studentId 상태 추가\r\n  const [token, setToken] = useState(null); // token 상태 추가\r\n\r\n  useEffect(() => {\r\n    const storedStudentId = localStorage.getItem(\"studentId\");\r\n    const storedToken = localStorage.getItem(\"token\");\r\n\r\n    console.log(\"Stored studentId:\", storedStudentId);  // 확인\r\n    console.log(\"Stored token:\", storedToken);          // 확인\r\n\r\n    if (storedStudentId) {\r\n      setStudentId(storedStudentId);\r\n    } else {\r\n      console.error(\"studentId가 로컬 스토리지에 없습니다.\");\r\n    }\r\n\r\n    if (storedToken) {\r\n      setToken(storedToken);\r\n    } else {\r\n      console.error(\"token이 로컬 스토리지에 없습니다.\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchAttendance = async () => {\r\n      if (!studentId || !token) {\r\n        console.error(\"로그인이 필요하거나 studentId가 없습니다.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.get(`http://localhost:8090/api/attendance/student`, {\r\n          params: { studentId },\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        \r\n        // 응답이 배열인지 확인 후 설정\r\n        if (Array.isArray(response.data)) {\r\n          setAttendanceData(response.data);\r\n        } else {\r\n          console.error(\"출석 데이터가 배열 형식이 아닙니다.\");\r\n          setAttendanceData([]); // 빈 배열로 설정\r\n        }\r\n      } catch (error) {\r\n        console.error(\"출석 데이터를 불러오는 중 오류 발생:\", error);\r\n        setAttendanceData([]); // 오류 발생 시 빈 배열로 설정\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // studentId와 token이 모두 설정되었을 때만 fetchAttendance 호출\r\n    if (studentId && token) {\r\n      fetchAttendance();\r\n    }\r\n  }, [studentId, token]); // studentId, token 변경 시마다 API 호출\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (!attendanceData || attendanceData.length === 0) {\r\n    return <div>출석 데이터가 없습니다.</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* 출석 데이터 출력 */}\r\n      {attendanceData.map((attendance, index) => (\r\n        <div key={index}>\r\n          <p>출석 정보: {attendance.someField}</p> {/* 출석 정보 출력 예시 */}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentAttendance;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}