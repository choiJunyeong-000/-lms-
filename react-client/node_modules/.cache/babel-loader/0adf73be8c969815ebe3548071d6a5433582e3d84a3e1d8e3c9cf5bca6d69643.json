{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIG60309\\\\react-client\\\\src\\\\components\\\\VideoDetailPage.js\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoDetailPage = ({\n  videoUrl,\n  week\n}) => {\n  _s();\n  const videoRef = useRef(null);\n  const [isChecked, setIsChecked] = useState(false);\n  const [lastSavedProgress, setLastSavedProgress] = useState(0);\n  const progressSaveInterval = 10; // 10초마다 진도율 저장\n  const ATTENDANCE_THRESHOLD = 90; // 출석 인정 기준 시청률 (90%)\n  const [content, setContent] = useState(null);\n  const token = localStorage.getItem(\"token\");\n  const studentId = localStorage.getItem(\"studentId\");\n  const courseId = localStorage.getItem(\"courseId\");\n  useEffect(() => {\n    // videoContent를 sessionStorage에서 가져오기\n    const savedContent = sessionStorage.getItem(\"videoContent\");\n    if (savedContent) {\n      setContent(JSON.parse(savedContent));\n    }\n  }, []);\n  useEffect(() => {\n    // 초기 출석 상태 확인\n    const checkAttendanceStatus = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8090/api/attendance/status?studentId=${studentId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.data[courseId] === true) {\n          setIsChecked(true);\n        }\n      } catch (error) {\n        console.error(\"출석 상태 확인 실패\", error);\n      }\n    };\n\n    // 이전 시청 진도율 확인\n    const checkProgressStatus = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8090/api/attendance/progress/status?studentId=${studentId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.data[courseId]) {\n          setLastSavedProgress(response.data[courseId]);\n\n          // 동영상 시간 설정 (비디오가 로드된 후에 실행)\n          if (videoRef.current) {\n            const duration = videoRef.current.duration;\n            if (!isNaN(duration)) {\n              videoRef.current.currentTime = response.data[courseId] / 100 * duration;\n            }\n          }\n        }\n      } catch (error) {\n        console.error(\"진도율 확인 실패\", error);\n      }\n    };\n    checkAttendanceStatus();\n    checkProgressStatus();\n  }, [studentId, courseId, token]);\n\n  // 비디오 메타데이터 로드 완료 후 진도율에 따라 영상 위치 설정\n  const handleLoadedMetadata = () => {\n    if (videoRef.current && lastSavedProgress > 0) {\n      const duration = videoRef.current.duration;\n      videoRef.current.currentTime = lastSavedProgress / 100 * duration;\n    }\n  };\n\n  // 현재 진도율 저장\n  const saveCurrentProgress = async () => {\n    if (!videoRef.current || !content) return;\n    const video = videoRef.current;\n    const watchedPercentage = video.currentTime / video.duration * 100;\n\n    // 이미 출석이 완료되었거나 진도율이 0인 경우 저장하지 않음\n    if (isChecked || watchedPercentage === 0) return;\n    try {\n      await axios.post(\"http://localhost:8090/api/attendance/progress/course\", {\n        studentId,\n        videoId: content.id,\n        // videoId로 사용\n        watchedPercentage\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"진도율 저장 완료:\", watchedPercentage);\n      setLastSavedProgress(watchedPercentage);\n    } catch (error) {\n      console.error(\"진도율 저장 실패\", error);\n    }\n  };\n\n  // 주기적으로 진도율 저장 (10초마다)\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      saveCurrentProgress();\n    }, progressSaveInterval * 1000);\n    return () => clearInterval(intervalId);\n  }, [studentId, content === null || content === void 0 ? void 0 : content.id, isChecked, token]);\n\n  // 영상 시청 중 처리\n  const handleTimeUpdate = async () => {\n    if (!videoRef.current || !content) return;\n    const video = videoRef.current;\n    const watchedPercentage = video.currentTime / video.duration * 100;\n    if (watchedPercentage >= ATTENDANCE_THRESHOLD && !isChecked) {\n      try {\n        const response = await axios.post(\"http://localhost:8090/api/attendance/course\", {\n          studentId,\n          courseId,\n          contentId: content.id,\n          // 비디오 ID 전달\n          watchedPercentage\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.data === \"출석 완료\") {\n          setIsChecked(true);\n        }\n      } catch (error) {\n        console.error(\"강의 출석 체크 실패\", error);\n      }\n    }\n  };\n  if (!content) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-player-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      controls: true,\n      autoPlay: true,\n      onTimeUpdate: handleTimeUpdate,\n      onLoadedMetadata: handleLoadedMetadata,\n      width: \"640\",\n      height: \"360\",\n      className: \"main-video\",\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: content === null || content === void 0 ? void 0 : content.filePath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), \"\\uBE0C\\uB77C\\uC6B0\\uC800\\uAC00 \\uBE44\\uB514\\uC624 \\uD0DC\\uADF8\\uB97C \\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attendance-status\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-info\",\n        children: [\"\\uD604\\uC7AC \\uC9C4\\uB3C4\\uC728: \", lastSavedProgress.toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"attendance-label\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isChecked,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), \"\\uCD9C\\uC11D \\uC644\\uB8CC \", isChecked ? \"✓\" : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoDetailPage, \"FiFYDxnuyUXuSLXety4HySsFLA8=\");\n_c = VideoDetailPage;\nexport default VideoDetailPage;\nvar _c;\n$RefreshReg$(_c, \"VideoDetailPage\");","map":{"version":3,"names":["useRef","useEffect","useState","axios","jsxDEV","_jsxDEV","VideoDetailPage","videoUrl","week","_s","videoRef","isChecked","setIsChecked","lastSavedProgress","setLastSavedProgress","progressSaveInterval","ATTENDANCE_THRESHOLD","content","setContent","token","localStorage","getItem","studentId","courseId","savedContent","sessionStorage","JSON","parse","checkAttendanceStatus","response","get","headers","Authorization","data","error","console","checkProgressStatus","current","duration","isNaN","currentTime","handleLoadedMetadata","saveCurrentProgress","video","watchedPercentage","post","videoId","id","log","intervalId","setInterval","clearInterval","handleTimeUpdate","contentId","children","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","controls","autoPlay","onTimeUpdate","onLoadedMetadata","width","height","src","filePath","toFixed","type","checked","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/BIG60309/react-client/src/components/VideoDetailPage.js"],"sourcesContent":["import { useRef, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst VideoDetailPage = ({ videoUrl, week }) => {\r\n  const videoRef = useRef(null);\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const [lastSavedProgress, setLastSavedProgress] = useState(0);\r\n  const progressSaveInterval = 10; // 10초마다 진도율 저장\r\n  const ATTENDANCE_THRESHOLD = 90; // 출석 인정 기준 시청률 (90%)\r\n  const [content, setContent] = useState(null);\r\n  const token = localStorage.getItem(\"token\");\r\n  const studentId = localStorage.getItem(\"studentId\");\r\n  const courseId = localStorage.getItem(\"courseId\");\r\n\r\n  useEffect(() => {\r\n    // videoContent를 sessionStorage에서 가져오기\r\n    const savedContent = sessionStorage.getItem(\"videoContent\");\r\n    if (savedContent) {\r\n      setContent(JSON.parse(savedContent));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // 초기 출석 상태 확인\r\n    const checkAttendanceStatus = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:8090/api/attendance/status?studentId=${studentId}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n\r\n        if (response.data[courseId] === true) {\r\n          setIsChecked(true);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"출석 상태 확인 실패\", error);\r\n      }\r\n    };\r\n\r\n    // 이전 시청 진도율 확인\r\n    const checkProgressStatus = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:8090/api/attendance/progress/status?studentId=${studentId}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n\r\n        if (response.data[courseId]) {\r\n          setLastSavedProgress(response.data[courseId]);\r\n\r\n          // 동영상 시간 설정 (비디오가 로드된 후에 실행)\r\n          if (videoRef.current) {\r\n            const duration = videoRef.current.duration;\r\n            if (!isNaN(duration)) {\r\n              videoRef.current.currentTime =\r\n                (response.data[courseId] / 100) * duration;\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"진도율 확인 실패\", error);\r\n      }\r\n    };\r\n\r\n    checkAttendanceStatus();\r\n    checkProgressStatus();\r\n  }, [studentId, courseId, token]);\r\n\r\n  // 비디오 메타데이터 로드 완료 후 진도율에 따라 영상 위치 설정\r\n  const handleLoadedMetadata = () => {\r\n    if (videoRef.current && lastSavedProgress > 0) {\r\n      const duration = videoRef.current.duration;\r\n      videoRef.current.currentTime = (lastSavedProgress / 100) * duration;\r\n    }\r\n  };\r\n\r\n  // 현재 진도율 저장\r\n  const saveCurrentProgress = async () => {\r\n    if (!videoRef.current || !content) return;\r\n\r\n    const video = videoRef.current;\r\n    const watchedPercentage = (video.currentTime / video.duration) * 100;\r\n\r\n    // 이미 출석이 완료되었거나 진도율이 0인 경우 저장하지 않음\r\n    if (isChecked || watchedPercentage === 0) return;\r\n\r\n    try {\r\n      await axios.post(\r\n        \"http://localhost:8090/api/attendance/progress/course\",\r\n        {\r\n          studentId,\r\n          videoId: content.id, // videoId로 사용\r\n          watchedPercentage,\r\n        },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      console.log(\"진도율 저장 완료:\", watchedPercentage);\r\n      setLastSavedProgress(watchedPercentage);\r\n    } catch (error) {\r\n      console.error(\"진도율 저장 실패\", error);\r\n    }\r\n  };\r\n\r\n  // 주기적으로 진도율 저장 (10초마다)\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      saveCurrentProgress();\r\n    }, progressSaveInterval * 1000);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [studentId, content?.id, isChecked, token]);\r\n\r\n  // 영상 시청 중 처리\r\n  const handleTimeUpdate = async () => {\r\n    if (!videoRef.current || !content) return;\r\n\r\n    const video = videoRef.current;\r\n    const watchedPercentage = (video.currentTime / video.duration) * 100;\r\n\r\n    if (watchedPercentage >= ATTENDANCE_THRESHOLD && !isChecked) {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://localhost:8090/api/attendance/course\",\r\n          {\r\n            studentId,\r\n            courseId,\r\n            contentId: content.id, // 비디오 ID 전달\r\n            watchedPercentage,\r\n          },\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n\r\n        if (response.data === \"출석 완료\") {\r\n          setIsChecked(true);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"강의 출석 체크 실패\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!content) {\r\n    return <p>로딩 중...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"video-player-container\">\r\n      <video\r\n        ref={videoRef}\r\n        controls\r\n        autoPlay\r\n        onTimeUpdate={handleTimeUpdate}\r\n        onLoadedMetadata={handleLoadedMetadata}\r\n        width=\"640\"\r\n        height=\"360\"\r\n        className=\"main-video\"\r\n      >\r\n        <source src={content?.filePath} />\r\n        브라우저가 비디오 태그를 지원하지 않습니다.\r\n      </video>\r\n\r\n      <div className=\"attendance-status\">\r\n        <div className=\"progress-info\">\r\n          현재 진도율: {lastSavedProgress.toFixed(2)}%\r\n        </div>\r\n        <label className=\"attendance-label\">\r\n          <input type=\"checkbox\" checked={isChecked} readOnly />\r\n          출석 완료 {isChecked ? \"✓\" : \"\"}\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoDetailPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}