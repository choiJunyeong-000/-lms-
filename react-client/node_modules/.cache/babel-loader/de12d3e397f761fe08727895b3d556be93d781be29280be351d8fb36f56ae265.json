{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst app = express();\nconst http = require('http').createServer(app);\nconst io = require('socket.io')(http, {\n  cors: {\n    origin: \"http://localhost:3000\",\n    // 클라이언트 도메인 (개발 중엔 3000번 포트)\n    methods: [\"GET\", \"POST\"]\n  }\n});\napp.use(cors());\n\n// Socket.IO 연결 처리\nio.on('connection', socket => {\n  console.log('새로운 클라이언트 접속:', socket.id);\n\n  // 1) 채팅 메시지 전송\n  socket.on('chat message', msg => {\n    console.log('메시지 받음:', msg);\n    // 모든 클라이언트에게 브로드캐스트\n    io.emit('chat message', msg);\n  });\n\n  // 2) 메시지 읽음 처리\n  socket.on('read message', readInfo => {\n    // readInfo: { messageId: xxx, readerId: yyy }\n    console.log('메시지 읽음 처리 요청:', readInfo);\n\n    // 모든 클라이언트에게 브로드캐스트\n    // - 실제로는 특정 방(room) 내 클라이언트에게만 emit할 수도 있음\n    io.emit('read message', readInfo);\n  });\n  socket.on('disconnect', () => {\n    console.log('클라이언트 연결 해제:', socket.id);\n  });\n});\n\n// 서버 구동\nconst PORT = 5000;\nhttp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","app","http","createServer","io","origin","methods","use","on","socket","console","log","id","msg","emit","readInfo","PORT","listen"],"sources":["C:/Users/BIG60309/react-client/src/index.js"],"sourcesContent":["const express = require('express');\nconst cors = require('cors');\nconst app = express();\nconst http = require('http').createServer(app);\nconst io = require('socket.io')(http, {\n  cors: {\n    origin: \"http://localhost:3000\", // 클라이언트 도메인 (개발 중엔 3000번 포트)\n    methods: [\"GET\", \"POST\"]\n  }\n});\n\napp.use(cors());\n\n// Socket.IO 연결 처리\nio.on('connection', (socket) => {\n  console.log('새로운 클라이언트 접속:', socket.id);\n\n  // 1) 채팅 메시지 전송\n  socket.on('chat message', (msg) => {\n    console.log('메시지 받음:', msg);\n    // 모든 클라이언트에게 브로드캐스트\n    io.emit('chat message', msg);\n  });\n\n  // 2) 메시지 읽음 처리\n  socket.on('read message', (readInfo) => {\n    // readInfo: { messageId: xxx, readerId: yyy }\n    console.log('메시지 읽음 처리 요청:', readInfo);\n\n    // 모든 클라이언트에게 브로드캐스트\n    // - 실제로는 특정 방(room) 내 클라이언트에게만 emit할 수도 있음\n    io.emit('read message', readInfo);\n  });\n\n  socket.on('disconnect', () => {\n    console.log('클라이언트 연결 해제:', socket.id);\n  });\n});\n\n// 서버 구동\nconst PORT = 5000;\nhttp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,GAAG,GAAGH,OAAO,CAAC,CAAC;AACrB,MAAMI,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC,CAACI,YAAY,CAACF,GAAG,CAAC;AAC9C,MAAMG,EAAE,GAAGL,OAAO,CAAC,WAAW,CAAC,CAACG,IAAI,EAAE;EACpCF,IAAI,EAAE;IACJK,MAAM,EAAE,uBAAuB;IAAE;IACjCC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM;EACzB;AACF,CAAC,CAAC;AAEFL,GAAG,CAACM,GAAG,CAACP,IAAI,CAAC,CAAC,CAAC;;AAEf;AACAI,EAAE,CAACI,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;EAC9BC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,MAAM,CAACG,EAAE,CAAC;;EAEvC;EACAH,MAAM,CAACD,EAAE,CAAC,cAAc,EAAGK,GAAG,IAAK;IACjCH,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEE,GAAG,CAAC;IAC3B;IACAT,EAAE,CAACU,IAAI,CAAC,cAAc,EAAED,GAAG,CAAC;EAC9B,CAAC,CAAC;;EAEF;EACAJ,MAAM,CAACD,EAAE,CAAC,cAAc,EAAGO,QAAQ,IAAK;IACtC;IACAL,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEI,QAAQ,CAAC;;IAEtC;IACA;IACAX,EAAE,CAACU,IAAI,CAAC,cAAc,EAAEC,QAAQ,CAAC;EACnC,CAAC,CAAC;EAEFN,MAAM,CAACD,EAAE,CAAC,YAAY,EAAE,MAAM;IAC5BE,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,MAAM,CAACG,EAAE,CAAC;EACxC,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMI,IAAI,GAAG,IAAI;AACjBd,IAAI,CAACe,MAAM,CAACD,IAAI,EAAE,MAAM;EACtBN,OAAO,CAACC,GAAG,CAAC,6BAA6BK,IAAI,EAAE,CAAC;AAClD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}