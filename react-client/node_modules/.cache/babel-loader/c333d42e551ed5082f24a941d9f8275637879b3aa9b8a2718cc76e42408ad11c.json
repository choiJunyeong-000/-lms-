{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIG60309\\\\react-client\\\\src\\\\components\\\\VideoDetailPage.js\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoDetailPage = ({\n  videoUrl,\n  week\n}) => {\n  _s();\n  const videoRef = useRef(null);\n  const [isChecked, setIsChecked] = useState(false);\n  const [lastSavedProgress, setLastSavedProgress] = useState(0);\n  const progressSaveInterval = 1; // 1초마다 진도율 저장\n  const ATTENDANCE_THRESHOLD = 90; // 출석 인정 기준 시청률 (90%)\n  const [content, setContent] = useState(null);\n  const token = localStorage.getItem('token');\n  const studentId = localStorage.getItem('studentId');\n  const courseId = localStorage.getItem('courseId'); // courseId 로컬 스토리지에서 가져오기\n  const contentId = sessionStorage.getItem('contentId'); // contentId 세션 스토리지에서 가져오기\n\n  useEffect(() => {\n    const savedContent = sessionStorage.getItem(\"videoContent\");\n    if (savedContent) {\n      setContent(JSON.parse(savedContent));\n    }\n  }, []);\n  useEffect(() => {\n    const checkAttendanceStatus = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8090/api/attendance/status?studentId=${studentId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // courseId가 키인 맵에서 출석 상태를 확인\n        if (response.data[courseId] === true) {\n          setIsChecked(true);\n        }\n      } catch (error) {\n        console.error(\"출석 상태 확인 실패\", error);\n      }\n    };\n    const checkProgressStatus = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8090/api/attendance/progress/status?studentId=${studentId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.data[courseId]) {\n          setLastSavedProgress(response.data[courseId]);\n\n          // 비디오 시간 설정\n          if (videoRef.current) {\n            const duration = videoRef.current.duration;\n            if (!isNaN(duration)) {\n              videoRef.current.currentTime = response.data[courseId] / 100 * duration;\n            }\n          }\n        }\n      } catch (error) {\n        console.error(\"진도율 확인 실패\", error);\n      }\n    };\n    checkAttendanceStatus();\n    checkProgressStatus();\n  }, [studentId, courseId, token]);\n  const handleLoadedMetadata = () => {\n    if (videoRef.current && lastSavedProgress > 0) {\n      const duration = videoRef.current.duration;\n      videoRef.current.currentTime = lastSavedProgress / 100 * duration;\n    }\n  };\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      saveCurrentProgress();\n    }, progressSaveInterval * 100);\n    return () => clearInterval(intervalId);\n  }, []);\n  const saveCurrentProgress = async () => {\n    if (!videoRef.current) return;\n    const video = videoRef.current;\n    const watchedPercentage = video.currentTime / video.duration * 100;\n\n    // 출석이 완료되었거나 진도율이 0인 경우 저장하지 않음\n    if (isChecked || watchedPercentage === 0) return;\n    try {\n      // 진도율 저장 API 호출 (courseId, contentId 포함)\n      await axios.post(\"http://localhost:8090/api/attendance/progress\", {\n        studentId,\n        courseId,\n        // courseId\n        contentId,\n        // contentId\n        watchedPercentage\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setLastSavedProgress(watchedPercentage);\n    } catch (error) {\n      console.error(\"진도율 저장 실패\", error);\n    }\n  };\n  const handleTimeUpdate = async () => {\n    if (!videoRef.current) return;\n    const video = videoRef.current;\n    const watchedPercentage = video.currentTime / video.duration * 100;\n\n    // 출석 완료 조건 확인 (90% 이상 시청 && 아직 출석 체크 안함)\n    if (watchedPercentage >= ATTENDANCE_THRESHOLD && !isChecked) {\n      try {\n        const response = await axios.post(\"http://localhost:8090/api/attendance/course\", {\n          studentId,\n          courseId,\n          // courseId\n          contentId,\n          // contentId\n          watchedPercentage\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.data === \"출석 완료\") {\n          setIsChecked(true);\n        }\n      } catch (error) {\n        console.error(\"강의 출석 체크 실패\", error);\n      }\n    }\n  };\n  const handleCourseAttendance = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:8090/api/attendance/course\", {\n        studentId,\n        courseId,\n        // courseId\n        contentId,\n        // contentId\n        watchedPercentage: 100\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.data === \"출석 완료\") {\n        setIsChecked(true);\n      }\n    } catch (error) {\n      console.error(\"강의 출석 체크 실패\", error);\n    }\n  };\n  if (!content) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-player-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      controls: true,\n      autoPlay: true,\n      onTimeUpdate: handleTimeUpdate,\n      onLoadedMetadata: handleLoadedMetadata,\n      width: \"640\",\n      height: \"360\",\n      className: \"main-video\",\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: content === null || content === void 0 ? void 0 : content.filePath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), \"\\uBE0C\\uB77C\\uC6B0\\uC800\\uAC00 \\uBE44\\uB514\\uC624 \\uD0DC\\uADF8\\uB97C \\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attendance-status\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-info\",\n        children: [\"\\uD604\\uC7AC \\uC9C4\\uB3C4\\uC728: \", lastSavedProgress.toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"attendance-label\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isChecked,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), \"\\uCD9C\\uC11D \\uC644\\uB8CC \", isChecked ? '✓' : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), !isChecked && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"attendance-button\",\n        onClick: handleCourseAttendance,\n        children: \"\\uC218\\uB3D9 \\uCD9C\\uC11D \\uCCB4\\uD06C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n};\n_s(VideoDetailPage, \"FiFYDxnuyUXuSLXety4HySsFLA8=\");\n_c = VideoDetailPage;\nexport default VideoDetailPage;\nvar _c;\n$RefreshReg$(_c, \"VideoDetailPage\");","map":{"version":3,"names":["useRef","useEffect","useState","useParams","axios","jsxDEV","_jsxDEV","VideoDetailPage","videoUrl","week","_s","videoRef","isChecked","setIsChecked","lastSavedProgress","setLastSavedProgress","progressSaveInterval","ATTENDANCE_THRESHOLD","content","setContent","token","localStorage","getItem","studentId","courseId","contentId","sessionStorage","savedContent","JSON","parse","checkAttendanceStatus","response","get","headers","Authorization","data","error","console","checkProgressStatus","current","duration","isNaN","currentTime","handleLoadedMetadata","intervalId","setInterval","saveCurrentProgress","clearInterval","video","watchedPercentage","post","handleTimeUpdate","handleCourseAttendance","children","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","controls","autoPlay","onTimeUpdate","onLoadedMetadata","width","height","src","filePath","toFixed","type","checked","readOnly","onClick","_c","$RefreshReg$"],"sources":["C:/Users/BIG60309/react-client/src/components/VideoDetailPage.js"],"sourcesContent":["import { useRef, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst VideoDetailPage = ({ videoUrl, week }) => {\r\n    const videoRef = useRef(null);\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const [lastSavedProgress, setLastSavedProgress] = useState(0);\r\n    const progressSaveInterval = 1; // 1초마다 진도율 저장\r\n    const ATTENDANCE_THRESHOLD = 90; // 출석 인정 기준 시청률 (90%)\r\n    const [content, setContent] = useState(null);\r\n    const token = localStorage.getItem('token');\r\n    const studentId = localStorage.getItem('studentId');\r\n    const courseId = localStorage.getItem('courseId');  // courseId 로컬 스토리지에서 가져오기\r\n    const contentId = sessionStorage.getItem('contentId');  // contentId 세션 스토리지에서 가져오기\r\n\r\n    useEffect(() => {\r\n        const savedContent = sessionStorage.getItem(\"videoContent\");\r\n        if (savedContent) {\r\n            setContent(JSON.parse(savedContent));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const checkAttendanceStatus = async () => {\r\n            try {\r\n                const response = await axios.get(\r\n                    `http://localhost:8090/api/attendance/status?studentId=${studentId}`,\r\n                    { headers: { Authorization: `Bearer ${token}` } }\r\n                );\r\n\r\n                // courseId가 키인 맵에서 출석 상태를 확인\r\n                if (response.data[courseId] === true) {\r\n                    setIsChecked(true);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"출석 상태 확인 실패\", error);\r\n            }\r\n        };\r\n\r\n        const checkProgressStatus = async () => {\r\n            try {\r\n                const response = await axios.get(\r\n                    `http://localhost:8090/api/attendance/progress/status?studentId=${studentId}`,\r\n                    { headers: { Authorization: `Bearer ${token}` } }\r\n                );\r\n\r\n                if (response.data[courseId]) {\r\n                    setLastSavedProgress(response.data[courseId]);\r\n\r\n                    // 비디오 시간 설정\r\n                    if (videoRef.current) {\r\n                        const duration = videoRef.current.duration;\r\n                        if (!isNaN(duration)) {\r\n                            videoRef.current.currentTime = (response.data[courseId] / 100) * duration;\r\n                        }\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(\"진도율 확인 실패\", error);\r\n            }\r\n        };\r\n\r\n        checkAttendanceStatus();\r\n        checkProgressStatus();\r\n    }, [studentId, courseId, token]);\r\n\r\n    const handleLoadedMetadata = () => {\r\n        if (videoRef.current && lastSavedProgress > 0) {\r\n            const duration = videoRef.current.duration;\r\n            videoRef.current.currentTime = (lastSavedProgress / 100) * duration;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            saveCurrentProgress();\r\n        }, progressSaveInterval * 100);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    const saveCurrentProgress = async () => {\r\n        if (!videoRef.current) return;\r\n\r\n        const video = videoRef.current;\r\n        const watchedPercentage = (video.currentTime / video.duration) * 100;\r\n\r\n        // 출석이 완료되었거나 진도율이 0인 경우 저장하지 않음\r\n        if (isChecked || watchedPercentage === 0) return;\r\n\r\n        try {\r\n            // 진도율 저장 API 호출 (courseId, contentId 포함)\r\n            await axios.post(\r\n                \"http://localhost:8090/api/attendance/progress\",\r\n                { \r\n                    studentId, \r\n                    courseId,     // courseId\r\n                    contentId,    // contentId\r\n                    watchedPercentage \r\n                },\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n            );\r\n\r\n            setLastSavedProgress(watchedPercentage);\r\n        } catch (error) {\r\n            console.error(\"진도율 저장 실패\", error);\r\n        }\r\n    };\r\n\r\n    const handleTimeUpdate = async () => {\r\n        if (!videoRef.current) return;\r\n\r\n        const video = videoRef.current;\r\n        const watchedPercentage = (video.currentTime / video.duration) * 100;\r\n\r\n        // 출석 완료 조건 확인 (90% 이상 시청 && 아직 출석 체크 안함)\r\n        if (watchedPercentage >= ATTENDANCE_THRESHOLD && !isChecked) {\r\n            try {\r\n                const response = await axios.post(\r\n                    \"http://localhost:8090/api/attendance/course\",\r\n                    { \r\n                        studentId, \r\n                        courseId,     // courseId\r\n                        contentId,    // contentId\r\n                        watchedPercentage \r\n                    },\r\n                    { headers: { Authorization: `Bearer ${token}` } }\r\n                );\r\n\r\n                if (response.data === \"출석 완료\") {\r\n                    setIsChecked(true);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"강의 출석 체크 실패\", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCourseAttendance = async () => {\r\n        try {\r\n            const response = await axios.post(\r\n                \"http://localhost:8090/api/attendance/course\",\r\n                { \r\n                    studentId, \r\n                    courseId,     // courseId\r\n                    contentId,    // contentId\r\n                    watchedPercentage: 100 \r\n                },\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n            );\r\n\r\n            if (response.data === \"출석 완료\") {\r\n                setIsChecked(true);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"강의 출석 체크 실패\", error);\r\n        }\r\n    };\r\n\r\n    if (!content) {\r\n        return <p>로딩 중...</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"video-player-container\">\r\n            <video\r\n                ref={videoRef}\r\n                controls\r\n                autoPlay\r\n                onTimeUpdate={handleTimeUpdate}\r\n                onLoadedMetadata={handleLoadedMetadata}\r\n                width=\"640\"\r\n                height=\"360\"\r\n                className=\"main-video\"\r\n            >\r\n                <source src={content?.filePath} />\r\n                브라우저가 비디오 태그를 지원하지 않습니다.\r\n            </video>\r\n\r\n            <div className=\"attendance-status\">\r\n                <div className=\"progress-info\">\r\n                    현재 진도율: {lastSavedProgress.toFixed(2)}%\r\n                </div>\r\n                <label className=\"attendance-label\">\r\n                    <input type=\"checkbox\" checked={isChecked} readOnly />\r\n                    출석 완료 {isChecked ? '✓' : ''}\r\n                </label>\r\n                {!isChecked && (\r\n                    <button \r\n                        className=\"attendance-button\" \r\n                        onClick={handleCourseAttendance}\r\n                    >\r\n                        수동 출석 체크\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoDetailPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}