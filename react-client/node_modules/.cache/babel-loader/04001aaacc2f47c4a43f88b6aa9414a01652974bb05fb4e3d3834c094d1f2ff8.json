{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { io } from 'socket.io-client';\n// import axios from 'axios';\n// import { v4 as uuidv4 } from 'uuid'; // ✅ UUID 추가\n// import './MessagePage.css';\n\n// const socket = io('http://localhost:5000');\n\n// const MessagePage = () => {\n//   const [member, setMember] = useState(null);\n//   const [messages, setMessages] = useState([]);\n//   const [inputText, setInputText] = useState('');\n//   const [recipient, setRecipient] = useState(null);\n//   const [members, setMembers] = useState([]);\n\n//   // ✅ 로그인한 사용자 정보 및 전체 멤버 조회\n//   useEffect(() => {\n//     async function fetchMemberData() {\n//       try {\n//         const token = localStorage.getItem(\"token\");\n//         const resMe = await axios.get('http://localhost:8090/api/users/me', {\n//           headers: { Authorization: `Bearer ${token}` }\n//         });\n//         setMember(resMe.data);\n\n//         const resMembers = await axios.get('http://localhost:8090/api/chat-members', {\n//           headers: { Authorization: `Bearer ${token}` }\n//         });\n\n//         const otherMembers = resMembers.data.filter(m => m.studentId !== resMe.data.studentId);\n//         setMembers(otherMembers);\n//       } catch (error) {\n//         console.error(\"🚨 멤버 정보를 불러오는 데 실패했습니다.\", error);\n//       }\n//     }\n//     fetchMemberData();\n//   }, []);\n\n//   // ✅ 백엔드에서 채팅 내역 가져오기\n//   useEffect(() => {\n//     async function fetchMessages() {\n//       if (!member || !recipient) return;\n\n//       try {\n//         const token = localStorage.getItem(\"token\");\n//         if (!token) {\n//           console.error(\"🚨 JWT 토큰 없음. 로그인 필요\");\n//           return;\n//         }\n\n//         const response = await axios.get(`http://localhost:8090/api/chat/messages/${member.studentId}`, {\n//           headers: { Authorization: `Bearer ${token}` }\n//         });\n\n//         console.log(\"✅ 채팅 내역:\", response.data);\n//         setMessages(response.data);\n//       } catch (error) {\n//         console.error(\"🚨 채팅 내역을 불러오지 못했습니다.\", error);\n//       }\n//     }\n\n//     fetchMessages();\n//   }, [member, recipient]);\n\n//   // ✅ 실시간 메시지 수신 (이전 리스너 정리)\n//   useEffect(() => {\n//     const handleMessageReceive = (msg) => {\n//       console.log(\"📩 수신된 메시지:\", msg);\n\n//       setMessages(prev => {\n//         if (prev.some(m => m.id === msg.id)) { // ✅ 중복 메시지 필터링\n//           console.warn(\"⚠️ 중복 메시지 감지 - 추가 안 함\", msg);\n//           return prev;\n//         }\n//         return [...prev, msg];\n//       });\n//     };\n\n//     socket.off('chat message');  // ✅ 기존 이벤트 제거\n//     socket.on('chat message', handleMessageReceive);  // ✅ 새로운 리스너 등록\n\n//     return () => {\n//       socket.off('chat message', handleMessageReceive);  // ✅ 언마운트 시 정리\n//     };\n//   }, [member, recipient]);\n\n//   // ✅ 메시지 전송 처리\n//   const handleSend = async () => {\n//     const trimmedText = inputText.trim();\n//     if (!trimmedText || !recipient || !member) return;\n\n//     const newMsg = {\n//       sender: member.studentId,\n//       recipient: recipient.studentId,\n//       content: trimmedText\n//     };\n\n//     try {\n//       const response = await axios.post(\"http://localhost:8090/api/chat/send\", newMsg, {\n//         headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` }\n//       });\n\n//       console.log(\"✅ 전송된 메시지:\", response.data);\n\n//       // ✅ UUID 활용하여 key 중복 문제 해결\n//       setMessages((prev) => [\n//         ...prev,\n//         { ...response.data, id: response.data.id || uuidv4() }\n//       ]);\n\n//       socket.emit('chat message', response.data);\n//       setInputText('');\n//     } catch (error) {\n//       console.error(\"🚨 메시지 전송 실패\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"message-page-container\">\n//       <div className=\"chat-area\">\n//         <div className=\"chat-header\">\n//           {member && recipient \n//             ? `${member.name}과 ${recipient.name}의 대화`\n//             : \"수신자를 선택하세요\"}\n//         </div>\n\n//         <div className=\"recipient-selector\">\n//           <label>받는 사람: </label>\n//           <select onChange={(e) => setRecipient(members.find(m => m.studentId === e.target.value))}>\n//             <option value=\"\" disabled>📩 받는 사람을 선택하세요</option>\n//             {members.map(m => (\n//               <option key={m.studentId} value={m.studentId}>\n//                 {m.name}\n//               </option>\n//             ))}\n//           </select>\n//         </div>\n\n//         <div className=\"chat-messages\">\n//           {messages.map((msg) => (\n//             <div key={msg.id || uuidv4()} // ✅ UUID 활용하여 중복 키 방지\n//                  className={`chat-message ${msg.sender === member?.studentId ? 'sent' : 'received'}`}>\n//               <span>{msg.sender}: </span>\n//               <span>{msg.content}</span>\n//             </div>\n//           ))}\n//         </div>\n\n//         <div className=\"chat-input\">\n//           <input \n//             type=\"text\" \n//             value={inputText} \n//             onChange={(e) => setInputText(e.target.value)} \n//             placeholder=\"메시지를 입력하세요...\" \n//           />\n//           <button onClick={handleSend}>전송</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default MessagePage;","map":{"version":3,"names":[],"sources":["C:/Users/BIG60309/react-client/src/components/Message/MessagePage.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { io } from 'socket.io-client';\r\n// import axios from 'axios';\r\n// import { v4 as uuidv4 } from 'uuid'; // ✅ UUID 추가\r\n// import './MessagePage.css';\r\n\r\n// const socket = io('http://localhost:5000');\r\n\r\n// const MessagePage = () => {\r\n//   const [member, setMember] = useState(null);\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [inputText, setInputText] = useState('');\r\n//   const [recipient, setRecipient] = useState(null);\r\n//   const [members, setMembers] = useState([]);\r\n\r\n//   // ✅ 로그인한 사용자 정보 및 전체 멤버 조회\r\n//   useEffect(() => {\r\n//     async function fetchMemberData() {\r\n//       try {\r\n//         const token = localStorage.getItem(\"token\");\r\n//         const resMe = await axios.get('http://localhost:8090/api/users/me', {\r\n//           headers: { Authorization: `Bearer ${token}` }\r\n//         });\r\n//         setMember(resMe.data);\r\n\r\n//         const resMembers = await axios.get('http://localhost:8090/api/chat-members', {\r\n//           headers: { Authorization: `Bearer ${token}` }\r\n//         });\r\n\r\n//         const otherMembers = resMembers.data.filter(m => m.studentId !== resMe.data.studentId);\r\n//         setMembers(otherMembers);\r\n//       } catch (error) {\r\n//         console.error(\"🚨 멤버 정보를 불러오는 데 실패했습니다.\", error);\r\n//       }\r\n//     }\r\n//     fetchMemberData();\r\n//   }, []);\r\n\r\n//   // ✅ 백엔드에서 채팅 내역 가져오기\r\n//   useEffect(() => {\r\n//     async function fetchMessages() {\r\n//       if (!member || !recipient) return;\r\n\r\n//       try {\r\n//         const token = localStorage.getItem(\"token\");\r\n//         if (!token) {\r\n//           console.error(\"🚨 JWT 토큰 없음. 로그인 필요\");\r\n//           return;\r\n//         }\r\n\r\n//         const response = await axios.get(`http://localhost:8090/api/chat/messages/${member.studentId}`, {\r\n//           headers: { Authorization: `Bearer ${token}` }\r\n//         });\r\n\r\n//         console.log(\"✅ 채팅 내역:\", response.data);\r\n//         setMessages(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"🚨 채팅 내역을 불러오지 못했습니다.\", error);\r\n//       }\r\n//     }\r\n\r\n//     fetchMessages();\r\n//   }, [member, recipient]);\r\n\r\n//   // ✅ 실시간 메시지 수신 (이전 리스너 정리)\r\n//   useEffect(() => {\r\n//     const handleMessageReceive = (msg) => {\r\n//       console.log(\"📩 수신된 메시지:\", msg);\r\n  \r\n//       setMessages(prev => {\r\n//         if (prev.some(m => m.id === msg.id)) { // ✅ 중복 메시지 필터링\r\n//           console.warn(\"⚠️ 중복 메시지 감지 - 추가 안 함\", msg);\r\n//           return prev;\r\n//         }\r\n//         return [...prev, msg];\r\n//       });\r\n//     };\r\n  \r\n//     socket.off('chat message');  // ✅ 기존 이벤트 제거\r\n//     socket.on('chat message', handleMessageReceive);  // ✅ 새로운 리스너 등록\r\n  \r\n//     return () => {\r\n//       socket.off('chat message', handleMessageReceive);  // ✅ 언마운트 시 정리\r\n//     };\r\n//   }, [member, recipient]);\r\n  \r\n\r\n//   // ✅ 메시지 전송 처리\r\n//   const handleSend = async () => {\r\n//     const trimmedText = inputText.trim();\r\n//     if (!trimmedText || !recipient || !member) return;\r\n\r\n//     const newMsg = {\r\n//       sender: member.studentId,\r\n//       recipient: recipient.studentId,\r\n//       content: trimmedText\r\n//     };\r\n\r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:8090/api/chat/send\", newMsg, {\r\n//         headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` }\r\n//       });\r\n\r\n//       console.log(\"✅ 전송된 메시지:\", response.data);\r\n\r\n//       // ✅ UUID 활용하여 key 중복 문제 해결\r\n//       setMessages((prev) => [\r\n//         ...prev,\r\n//         { ...response.data, id: response.data.id || uuidv4() }\r\n//       ]);\r\n\r\n//       socket.emit('chat message', response.data);\r\n//       setInputText('');\r\n//     } catch (error) {\r\n//       console.error(\"🚨 메시지 전송 실패\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"message-page-container\">\r\n//       <div className=\"chat-area\">\r\n//         <div className=\"chat-header\">\r\n//           {member && recipient \r\n//             ? `${member.name}과 ${recipient.name}의 대화`\r\n//             : \"수신자를 선택하세요\"}\r\n//         </div>\r\n\r\n//         <div className=\"recipient-selector\">\r\n//           <label>받는 사람: </label>\r\n//           <select onChange={(e) => setRecipient(members.find(m => m.studentId === e.target.value))}>\r\n//             <option value=\"\" disabled>📩 받는 사람을 선택하세요</option>\r\n//             {members.map(m => (\r\n//               <option key={m.studentId} value={m.studentId}>\r\n//                 {m.name}\r\n//               </option>\r\n//             ))}\r\n//           </select>\r\n//         </div>\r\n\r\n//         <div className=\"chat-messages\">\r\n//           {messages.map((msg) => (\r\n//             <div key={msg.id || uuidv4()} // ✅ UUID 활용하여 중복 키 방지\r\n//                  className={`chat-message ${msg.sender === member?.studentId ? 'sent' : 'received'}`}>\r\n//               <span>{msg.sender}: </span>\r\n//               <span>{msg.content}</span>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <div className=\"chat-input\">\r\n//           <input \r\n//             type=\"text\" \r\n//             value={inputText} \r\n//             onChange={(e) => setInputText(e.target.value)} \r\n//             placeholder=\"메시지를 입력하세요...\" \r\n//           />\r\n//           <button onClick={handleSend}>전송</button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default MessagePage;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}