{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIG60309\\\\react-client\\\\src\\\\components\\\\survey\\\\AdminSurveyResponses.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Bar } from \"react-chartjs-2\";\nimport styles from \"./AdminSurveyResponses.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminSurveyResponses = () => {\n  _s();\n  const token = localStorage.getItem(\"token\");\n\n  // 강의 목록을 저장할 상태\n  const [courses, setCourses] = useState([]);\n  // 설문 목록을 그룹화한 객체\n  const [groupedSurveys, setGroupedSurveys] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [errorSurveys, setErrorSurveys] = useState(null);\n\n  // 설문별 응답 캐싱: { [surveyId]: ArrayOfResponses }\n  const [responsesBySurvey, setResponsesBySurvey] = useState({});\n  // 그룹 확장 여부 (각 그룹의 전체 응답 펼치기)\n  const [expandedGroups, setExpandedGroups] = useState({});\n  // 개별 설문 그래프 토글 여부\n  const [expandedCharts, setExpandedCharts] = useState({});\n\n  // 차트 옵션 (y축 정수화)\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: {\n          precision: 0\n        }\n      }\n    }\n  };\n\n  /**\r\n   * 1) 강의 목록 + 설문 목록 동시 불러오기\r\n   *    - 강의 목록: /api/courses\r\n   *    - 설문 목록: /api/surveys\r\n   */\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // 두 API를 병렬로 호출\n        const [coursesRes, surveysRes] = await Promise.all([axios.get(\"http://localhost:8090/api/courses\", {\n          headers: {\n            Authorization: token ? `Bearer ${token}` : \"\"\n          }\n        }), axios.get(\"http://localhost:8090/api/surveys\", {\n          headers: {\n            Authorization: token ? `Bearer ${token}` : \"\"\n          }\n        })]);\n\n        // 1. 강의 목록 저장\n        setCourses(coursesRes.data);\n\n        // 2. 설문 목록 → 그룹화\n        const surveys = surveysRes.data;\n        const grouped = surveys.reduce((acc, survey) => {\n          const type = survey.surveyType;\n          if (!acc[type]) acc[type] = {};\n\n          // 기본 그룹 키: survey.title || \"제목없음\"\n          let groupKey = survey.title || \"제목없음\";\n\n          // 만약 LECTURE_EVALUATION이라면, courseId로 강의 찾아서 이름 사용\n          if (type === \"LECTURE_EVALUATION\") {\n            // survey.courseId가 있는 경우, courses 목록에서 찾아봄\n            if (survey.courseId) {\n              const foundCourse = coursesRes.data.find(c => c.id === survey.courseId);\n              if (foundCourse) {\n                // \"강의 12341234 (ID: 1)\" 식으로 표시\n                groupKey = `강의 ${foundCourse.name} (ID: ${foundCourse.id})`;\n              } else {\n                // 강의 목록에 없는 경우 → courseId만 표시\n                groupKey = `강의 ${survey.courseId}`;\n              }\n            }\n          }\n          if (!acc[type][groupKey]) acc[type][groupKey] = [];\n          acc[type][groupKey].push(survey);\n          return acc;\n        }, {});\n        setGroupedSurveys(grouped);\n      } catch (error) {\n        console.error(\"데이터 불러오기 오류:\", error);\n        setErrorSurveys(\"강의/설문 데이터를 불러오는 데 실패했습니다.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (token) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setErrorSurveys(\"로그인이 필요합니다.\");\n    }\n  }, [token]);\n\n  /**\r\n   * 2) 특정 설문의 응답 불러오기\r\n   *    - 만약 API가 단일 객체를 반환할 수도 있으므로, 배열로 감싸서 처리\r\n   */\n  const fetchResponses = async surveyId => {\n    try {\n      const res = await axios.get(`http://localhost:8090/api/survey-responses/${surveyId}`, {\n        headers: {\n          Authorization: token ? `Bearer ${token}` : \"\"\n        }\n      });\n      let responses = [];\n      if (Array.isArray(res.data)) {\n        responses = res.data;\n      } else if (res.data) {\n        responses = [res.data];\n      }\n      setResponsesBySurvey(prev => ({\n        ...prev,\n        [surveyId]: responses\n      }));\n    } catch (err) {\n      console.error(`설문 ${surveyId} 응답 불러오기 오류:`, err);\n      alert(`설문 ${surveyId} 응답을 불러오는 데 실패했습니다.`);\n    }\n  };\n\n  /**\r\n   * 3) 그룹 전체 펼치기/접기\r\n   *    - 해당 그룹 내 모든 설문 응답을 미리 불러온 뒤 펼침\r\n   */\n  const handleViewGroupSubmissions = async (type, groupKey) => {\n    const group = groupedSurveys[type][groupKey];\n    for (const survey of group) {\n      if (!responsesBySurvey[survey.id]) {\n        await fetchResponses(survey.id);\n      }\n    }\n    const compositeKey = `${type}-${groupKey}`;\n    setExpandedGroups(prev => ({\n      ...prev,\n      [compositeKey]: !prev[compositeKey]\n    }));\n  };\n\n  /**\r\n   * 4) 개별 설문 그래프 토글\r\n   */\n  const toggleChart = async surveyId => {\n    if (!responsesBySurvey[surveyId]) {\n      await fetchResponses(surveyId);\n    }\n    setExpandedCharts(prev => ({\n      ...prev,\n      [surveyId]: !prev[surveyId]\n    }));\n  };\n\n  // 로딩/에러 처리\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB370\\uC774\\uD130 \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 23\n  }, this);\n  if (errorSurveys) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    children: errorSurveys\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 28\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.adminSurveyResponses,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"\\uC124\\uBB38 \\uD1B5\\uACC4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), Object.keys(groupedSurveys).map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.groupContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: styles.groupHeader,\n        children: type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.groupBoxList,\n        children: Object.keys(groupedSurveys[type]).map(groupKey => {\n          const group = groupedSurveys[type][groupKey];\n          const compositeKey = `${type}-${groupKey}`;\n          const isExpanded = expandedGroups[compositeKey];\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.groupBox,\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: styles.groupBoxHeader,\n              children: groupKey\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: styles.groupButton,\n              onClick: () => handleViewGroupSubmissions(type, groupKey),\n              children: isExpanded ? \"전체 응답 숨기기\" : \"전체 응답 보기\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 19\n            }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.submissionGrid,\n              children: group.map(survey => {\n                const surveyResponses = responsesBySurvey[survey.id] || [];\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.surveyCard,\n                  children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                    className: styles.surveyCardHeader,\n                    children: survey.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"\\uC751\\uB2F5 \\uC778\\uC6D0: \", surveyResponses.length]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 200,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: styles.responseButton,\n                    onClick: () => toggleChart(survey.id),\n                    children: expandedCharts[survey.id] ? \"그래프 숨기기\" : \"그래프 보기\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 29\n                  }, this), expandedCharts[survey.id] && (survey.questions && survey.questions.length > 0 ? survey.questions.map(question => {\n                    const optionCounts = {};\n                    surveyResponses.forEach(resp => {\n                      const chosenOption = resp.response && resp.response[question.id];\n                      if (chosenOption) {\n                        optionCounts[chosenOption] = (optionCounts[chosenOption] || 0) + 1;\n                      }\n                    });\n                    const labels = Object.keys(optionCounts);\n                    const data = labels.map(label => optionCounts[label]);\n                    const chartData = {\n                      labels,\n                      datasets: [{\n                        label: \"응답 인원\",\n                        data,\n                        backgroundColor: \"rgba(75,192,192,0.4)\",\n                        borderColor: \"rgba(75,192,192,1)\",\n                        borderWidth: 1\n                      }]\n                    };\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: styles.chartBox,\n                      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: styles.chartBoxHeader,\n                        children: question.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 246,\n                        columnNumber: 41\n                      }, this), labels.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: styles.chartContainer,\n                        children: /*#__PURE__*/_jsxDEV(Bar, {\n                          data: chartData,\n                          options: chartOptions\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 251,\n                          columnNumber: 45\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 250,\n                        columnNumber: 43\n                      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: \"\\uC751\\uB2F5\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 257,\n                        columnNumber: 43\n                      }, this)]\n                    }, question.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 242,\n                      columnNumber: 39\n                    }, this);\n                  }) : (() => {\n                    // question 배열이 없는 경우 → 응답 전체를 집계\n                    const optionCounts = {};\n                    surveyResponses.forEach(resp => {\n                      const chosenOption = resp.response;\n                      if (!optionCounts[chosenOption]) {\n                        optionCounts[chosenOption] = 0;\n                      }\n                      optionCounts[chosenOption]++;\n                    });\n                    const labels = Object.keys(optionCounts);\n                    const data = labels.map(label => optionCounts[label]);\n                    const chartData = {\n                      labels,\n                      datasets: [{\n                        label: \"응답 인원\",\n                        data,\n                        backgroundColor: \"rgba(75,192,192,0.4)\",\n                        borderColor: \"rgba(75,192,192,1)\",\n                        borderWidth: 1\n                      }]\n                    };\n                    return labels.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: styles.chartContainer,\n                      children: /*#__PURE__*/_jsxDEV(Bar, {\n                        data: chartData,\n                        options: chartOptions\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 292,\n                        columnNumber: 41\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 291,\n                      columnNumber: 39\n                    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: \"\\uC751\\uB2F5\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 298,\n                      columnNumber: 39\n                    }, this);\n                  })())]\n                }, survey.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 27\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 21\n            }, this)]\n          }, groupKey, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this)]\n    }, type, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminSurveyResponses, \"62z5lVL46tHQ7x02moEUbgGnpKg=\");\n_c = AdminSurveyResponses;\nexport default AdminSurveyResponses;\nvar _c;\n$RefreshReg$(_c, \"AdminSurveyResponses\");","map":{"version":3,"names":["React","useEffect","useState","axios","Bar","styles","jsxDEV","_jsxDEV","AdminSurveyResponses","_s","token","localStorage","getItem","courses","setCourses","groupedSurveys","setGroupedSurveys","loading","setLoading","errorSurveys","setErrorSurveys","responsesBySurvey","setResponsesBySurvey","expandedGroups","setExpandedGroups","expandedCharts","setExpandedCharts","chartOptions","scales","y","beginAtZero","ticks","precision","fetchData","coursesRes","surveysRes","Promise","all","get","headers","Authorization","data","surveys","grouped","reduce","acc","survey","type","surveyType","groupKey","title","courseId","foundCourse","find","c","id","name","push","error","console","fetchResponses","surveyId","res","responses","Array","isArray","prev","err","alert","handleViewGroupSubmissions","group","compositeKey","toggleChart","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","className","adminSurveyResponses","textAlign","Object","keys","map","groupContainer","groupHeader","groupBoxList","isExpanded","groupBox","groupBoxHeader","groupButton","onClick","submissionGrid","surveyResponses","surveyCard","surveyCardHeader","description","length","responseButton","questions","question","optionCounts","forEach","resp","chosenOption","response","labels","label","chartData","datasets","backgroundColor","borderColor","borderWidth","chartBox","chartBoxHeader","text","chartContainer","options","_c","$RefreshReg$"],"sources":["C:/Users/BIG60309/react-client/src/components/survey/AdminSurveyResponses.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport styles from \"./AdminSurveyResponses.module.css\";\r\n\r\nconst AdminSurveyResponses = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  // 강의 목록을 저장할 상태\r\n  const [courses, setCourses] = useState([]);\r\n  // 설문 목록을 그룹화한 객체\r\n  const [groupedSurveys, setGroupedSurveys] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [errorSurveys, setErrorSurveys] = useState(null);\r\n\r\n  // 설문별 응답 캐싱: { [surveyId]: ArrayOfResponses }\r\n  const [responsesBySurvey, setResponsesBySurvey] = useState({});\r\n  // 그룹 확장 여부 (각 그룹의 전체 응답 펼치기)\r\n  const [expandedGroups, setExpandedGroups] = useState({});\r\n  // 개별 설문 그래프 토글 여부\r\n  const [expandedCharts, setExpandedCharts] = useState({});\r\n\r\n  // 차트 옵션 (y축 정수화)\r\n  const chartOptions = {\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        ticks: {\r\n          precision: 0,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  /**\r\n   * 1) 강의 목록 + 설문 목록 동시 불러오기\r\n   *    - 강의 목록: /api/courses\r\n   *    - 설문 목록: /api/surveys\r\n   */\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // 두 API를 병렬로 호출\r\n        const [coursesRes, surveysRes] = await Promise.all([\r\n          axios.get(\"http://localhost:8090/api/courses\", {\r\n            headers: { Authorization: token ? `Bearer ${token}` : \"\" },\r\n          }),\r\n          axios.get(\"http://localhost:8090/api/surveys\", {\r\n            headers: { Authorization: token ? `Bearer ${token}` : \"\" },\r\n          }),\r\n        ]);\r\n\r\n        // 1. 강의 목록 저장\r\n        setCourses(coursesRes.data);\r\n\r\n        // 2. 설문 목록 → 그룹화\r\n        const surveys = surveysRes.data;\r\n        const grouped = surveys.reduce((acc, survey) => {\r\n          const type = survey.surveyType;\r\n          if (!acc[type]) acc[type] = {};\r\n\r\n          // 기본 그룹 키: survey.title || \"제목없음\"\r\n          let groupKey = survey.title || \"제목없음\";\r\n\r\n          // 만약 LECTURE_EVALUATION이라면, courseId로 강의 찾아서 이름 사용\r\n          if (type === \"LECTURE_EVALUATION\") {\r\n            // survey.courseId가 있는 경우, courses 목록에서 찾아봄\r\n            if (survey.courseId) {\r\n              const foundCourse = coursesRes.data.find(\r\n                (c) => c.id === survey.courseId\r\n              );\r\n              if (foundCourse) {\r\n                // \"강의 12341234 (ID: 1)\" 식으로 표시\r\n                groupKey = `강의 ${foundCourse.name} (ID: ${foundCourse.id})`;\r\n              } else {\r\n                // 강의 목록에 없는 경우 → courseId만 표시\r\n                groupKey = `강의 ${survey.courseId}`;\r\n              }\r\n            }\r\n          }\r\n\r\n          if (!acc[type][groupKey]) acc[type][groupKey] = [];\r\n          acc[type][groupKey].push(survey);\r\n          return acc;\r\n        }, {});\r\n\r\n        setGroupedSurveys(grouped);\r\n      } catch (error) {\r\n        console.error(\"데이터 불러오기 오류:\", error);\r\n        setErrorSurveys(\"강의/설문 데이터를 불러오는 데 실패했습니다.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (token) {\r\n      fetchData();\r\n    } else {\r\n      setLoading(false);\r\n      setErrorSurveys(\"로그인이 필요합니다.\");\r\n    }\r\n  }, [token]);\r\n\r\n  /**\r\n   * 2) 특정 설문의 응답 불러오기\r\n   *    - 만약 API가 단일 객체를 반환할 수도 있으므로, 배열로 감싸서 처리\r\n   */\r\n  const fetchResponses = async (surveyId) => {\r\n    try {\r\n      const res = await axios.get(\r\n        `http://localhost:8090/api/survey-responses/${surveyId}`,\r\n        { headers: { Authorization: token ? `Bearer ${token}` : \"\" } }\r\n      );\r\n      let responses = [];\r\n      if (Array.isArray(res.data)) {\r\n        responses = res.data;\r\n      } else if (res.data) {\r\n        responses = [res.data];\r\n      }\r\n      setResponsesBySurvey((prev) => ({\r\n        ...prev,\r\n        [surveyId]: responses,\r\n      }));\r\n    } catch (err) {\r\n      console.error(`설문 ${surveyId} 응답 불러오기 오류:`, err);\r\n      alert(`설문 ${surveyId} 응답을 불러오는 데 실패했습니다.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 3) 그룹 전체 펼치기/접기\r\n   *    - 해당 그룹 내 모든 설문 응답을 미리 불러온 뒤 펼침\r\n   */\r\n  const handleViewGroupSubmissions = async (type, groupKey) => {\r\n    const group = groupedSurveys[type][groupKey];\r\n    for (const survey of group) {\r\n      if (!responsesBySurvey[survey.id]) {\r\n        await fetchResponses(survey.id);\r\n      }\r\n    }\r\n    const compositeKey = `${type}-${groupKey}`;\r\n    setExpandedGroups((prev) => ({\r\n      ...prev,\r\n      [compositeKey]: !prev[compositeKey],\r\n    }));\r\n  };\r\n\r\n  /**\r\n   * 4) 개별 설문 그래프 토글\r\n   */\r\n  const toggleChart = async (surveyId) => {\r\n    if (!responsesBySurvey[surveyId]) {\r\n      await fetchResponses(surveyId);\r\n    }\r\n    setExpandedCharts((prev) => ({\r\n      ...prev,\r\n      [surveyId]: !prev[surveyId],\r\n    }));\r\n  };\r\n\r\n  // 로딩/에러 처리\r\n  if (loading) return <div>데이터 불러오는 중...</div>;\r\n  if (errorSurveys) return <div style={{ color: \"red\" }}>{errorSurveys}</div>;\r\n\r\n  return (\r\n    <div className={styles.adminSurveyResponses}>\r\n      <h2 style={{ textAlign: \"center\" }}>설문 통계</h2>\r\n\r\n      {/* 설문 타입 반복 */}\r\n      {Object.keys(groupedSurveys).map((type) => (\r\n        <div key={type} className={styles.groupContainer}>\r\n          <h3 className={styles.groupHeader}>{type}</h3>\r\n\r\n          <div className={styles.groupBoxList}>\r\n            {/* 그룹(강의별/제목별) 반복 */}\r\n            {Object.keys(groupedSurveys[type]).map((groupKey) => {\r\n              const group = groupedSurveys[type][groupKey];\r\n              const compositeKey = `${type}-${groupKey}`;\r\n              const isExpanded = expandedGroups[compositeKey];\r\n\r\n              return (\r\n                <div key={groupKey} className={styles.groupBox}>\r\n                  <h4 className={styles.groupBoxHeader}>{groupKey}</h4>\r\n                  <button\r\n                    className={styles.groupButton}\r\n                    onClick={() => handleViewGroupSubmissions(type, groupKey)}\r\n                  >\r\n                    {isExpanded ? \"전체 응답 숨기기\" : \"전체 응답 보기\"}\r\n                  </button>\r\n\r\n                  {isExpanded && (\r\n                    <div className={styles.submissionGrid}>\r\n                      {group.map((survey) => {\r\n                        const surveyResponses = responsesBySurvey[survey.id] || [];\r\n                        return (\r\n                          <div key={survey.id} className={styles.surveyCard}>\r\n                            <h5 className={styles.surveyCardHeader}>\r\n                              {survey.description}\r\n                            </h5>\r\n                            <p>응답 인원: {surveyResponses.length}</p>\r\n                            <button\r\n                              className={styles.responseButton}\r\n                              onClick={() => toggleChart(survey.id)}\r\n                            >\r\n                              {expandedCharts[survey.id]\r\n                                ? \"그래프 숨기기\"\r\n                                : \"그래프 보기\"}\r\n                            </button>\r\n                            {expandedCharts[survey.id] &&\r\n                              (survey.questions && survey.questions.length > 0\r\n                                ? survey.questions.map((question) => {\r\n                                    const optionCounts = {};\r\n                                    surveyResponses.forEach((resp) => {\r\n                                      const chosenOption =\r\n                                        resp.response &&\r\n                                        resp.response[question.id];\r\n                                      if (chosenOption) {\r\n                                        optionCounts[chosenOption] =\r\n                                          (optionCounts[chosenOption] || 0) + 1;\r\n                                      }\r\n                                    });\r\n                                    const labels = Object.keys(optionCounts);\r\n                                    const data = labels.map(\r\n                                      (label) => optionCounts[label]\r\n                                    );\r\n                                    const chartData = {\r\n                                      labels,\r\n                                      datasets: [\r\n                                        {\r\n                                          label: \"응답 인원\",\r\n                                          data,\r\n                                          backgroundColor:\r\n                                            \"rgba(75,192,192,0.4)\",\r\n                                          borderColor:\r\n                                            \"rgba(75,192,192,1)\",\r\n                                          borderWidth: 1,\r\n                                        },\r\n                                      ],\r\n                                    };\r\n\r\n                                    return (\r\n                                      <div\r\n                                        key={question.id}\r\n                                        className={styles.chartBox}\r\n                                      >\r\n                                        <h6 className={styles.chartBoxHeader}>\r\n                                          {question.text}\r\n                                        </h6>\r\n                                        {labels.length > 0 ? (\r\n                                          <div className={styles.chartContainer}>\r\n                                            <Bar\r\n                                              data={chartData}\r\n                                              options={chartOptions}\r\n                                            />\r\n                                          </div>\r\n                                        ) : (\r\n                                          <p>응답이 없습니다.</p>\r\n                                        )}\r\n                                      </div>\r\n                                    );\r\n                                  })\r\n                                : (() => {\r\n                                    // question 배열이 없는 경우 → 응답 전체를 집계\r\n                                    const optionCounts = {};\r\n                                    surveyResponses.forEach((resp) => {\r\n                                      const chosenOption = resp.response;\r\n                                      if (!optionCounts[chosenOption]) {\r\n                                        optionCounts[chosenOption] = 0;\r\n                                      }\r\n                                      optionCounts[chosenOption]++;\r\n                                    });\r\n                                    const labels = Object.keys(optionCounts);\r\n                                    const data = labels.map(\r\n                                      (label) => optionCounts[label]\r\n                                    );\r\n                                    const chartData = {\r\n                                      labels,\r\n                                      datasets: [\r\n                                        {\r\n                                          label: \"응답 인원\",\r\n                                          data,\r\n                                          backgroundColor:\r\n                                            \"rgba(75,192,192,0.4)\",\r\n                                          borderColor:\r\n                                            \"rgba(75,192,192,1)\",\r\n                                          borderWidth: 1,\r\n                                        },\r\n                                      ],\r\n                                    };\r\n                                    return labels.length > 0 ? (\r\n                                      <div className={styles.chartContainer}>\r\n                                        <Bar\r\n                                          data={chartData}\r\n                                          options={chartOptions}\r\n                                        />\r\n                                      </div>\r\n                                    ) : (\r\n                                      <p>응답이 없습니다.</p>\r\n                                    );\r\n                                  })())}\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminSurveyResponses;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}