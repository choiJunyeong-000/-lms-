{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIG60309\\\\react-client\\\\src\\\\components\\\\student\\\\CourseList\\\\CourseDetail\\\\Quiz\\\\ExamSelection.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExamSelection() {\n  _s();\n  const {\n    courseId\n  } = useParams(); // URL에서 courseId 가져오기\n  console.log(\"Fetched courseId:\", courseId); // courseId 확인\n\n  const [examId, setExamId] = useState(\"\"); // 초기값을 빈 문자열로 설정\n  const [exams, setExams] = useState([]);\n  const [questions, setQuestions] = useState([]); // 문제 목록 상태 추가\n  const [loading, setLoading] = useState(true);\n  const token = localStorage.getItem(\"token\");\n  const navigate = useNavigate();\n  const fetchExams = useCallback(async () => {\n    console.log(\"시험 목록 요청 중... courseId:\", courseId); // courseId 확인\n    if (!token) {\n      console.error(\"로그인이 필요합니다.\");\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:8090/api/courses/${courseId}/exams`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"시험 목록 응답:\", response.data);\n      setExams(response.data); // 응답 데이터를 그대로 사용\n    } catch (error) {\n      console.error(\"시험 목록 불러오기 오류:\", error.response ? error.response.data : error.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [courseId, token]);\n  useEffect(() => {\n    fetchExams();\n  }, [fetchExams]);\n\n  // 선택된 시험의 문제 목록 가져오기\n  const fetchQuestions = useCallback(async examId => {\n    if (!examId) return;\n    try {\n      const response = await axios.get(`http://localhost:8090/api/exams/${examId}/questions`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"문제 목록 응답:\", response.data);\n      setQuestions(response.data); // 문제 목록 상태 업데이트\n    } catch (error) {\n      console.error(\"문제 목록 불러오기 오류:\", error.response ? error.response.data : error.message);\n    }\n  }, [token]);\n  const handleExamChange = e => {\n    const selectedExamId = e.target.value;\n    console.log(\"선택된 시험 ID:\", selectedExamId); // 추가된 로그\n    setExamId(selectedExamId); // 선택된 시험 ID 업데이트\n    fetchQuestions(selectedExamId); // 문제 목록 가져오기\n  };\n  const handleStartQuiz = () => {\n    if (examId) {\n      navigate(`/courses/${courseId}/quiz/${examId}`); // 퀴즈 시작 페이지로 이동\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uD83D\\uDCE1 \\uC2DC\\uD5D8 \\uBAA9\\uB85D \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC2DC\\uD5D8 \\uC120\\uD0DD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"exam-select\",\n      children: \"\\uC2DC\\uD5D8 \\uC120\\uD0DD:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"exam-select\",\n      value: examId // 초기값을 빈 문자열로 설정했으므로 null이 아닌 빈 문자열로 설정\n      ,\n      onChange: handleExamChange // 드롭다운에서 선택된 값을 examId에 저장하고 문제 리스트 가져오기\n      ,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"\\uC2DC\\uD5D8\\uC744 \\uC120\\uD0DD\\uD558\\uC138\\uC694\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), exams.map(exam => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: exam.id,\n        children: exam.title\n      }, exam.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uBB38\\uC81C \\uBAA9\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: questions.map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: question.text\n      }, question.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this) // 문제 텍스트를 리스트로 표시\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartQuiz,\n      className: \"start-btn\",\n      disabled: !examId,\n      children: \"\\uD034\\uC988 \\uC2DC\\uC791\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(ExamSelection, \"R9R2QgGndXXjEKbrVyS1JpJ1ASQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ExamSelection;\nexport default ExamSelection;\nvar _c;\n$RefreshReg$(_c, \"ExamSelection\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","useNavigate","useParams","jsxDEV","_jsxDEV","ExamSelection","_s","courseId","console","log","examId","setExamId","exams","setExams","questions","setQuestions","loading","setLoading","token","localStorage","getItem","navigate","fetchExams","error","response","get","headers","Authorization","data","message","fetchQuestions","handleExamChange","e","selectedExamId","target","value","handleStartQuiz","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","map","exam","title","question","text","onClick","className","disabled","_c","$RefreshReg$"],"sources":["C:/Users/BIG60309/react-client/src/components/student/CourseList/CourseDetail/Quiz/ExamSelection.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nfunction ExamSelection() {\r\n    const { courseId } = useParams(); // URL에서 courseId 가져오기\r\n    console.log(\"Fetched courseId:\", courseId); // courseId 확인\r\n\r\n    const [examId, setExamId] = useState(\"\"); // 초기값을 빈 문자열로 설정\r\n    const [exams, setExams] = useState([]);\r\n    const [questions, setQuestions] = useState([]); // 문제 목록 상태 추가\r\n    const [loading, setLoading] = useState(true);\r\n    const token = localStorage.getItem(\"token\");\r\n    const navigate = useNavigate();\r\n\r\n    const fetchExams = useCallback(async () => {\r\n        console.log(\"시험 목록 요청 중... courseId:\", courseId); // courseId 확인\r\n        if (!token) {\r\n            console.error(\"로그인이 필요합니다.\");\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.get(`http://localhost:8090/api/courses/${courseId}/exams`, {\r\n                headers: { Authorization: `Bearer ${token}` }\r\n            });\r\n\r\n            console.log(\"시험 목록 응답:\", response.data);\r\n            setExams(response.data); // 응답 데이터를 그대로 사용\r\n        } catch (error) {\r\n            console.error(\"시험 목록 불러오기 오류:\", error.response ? error.response.data : error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [courseId, token]);\r\n\r\n    useEffect(() => {\r\n        fetchExams();\r\n    }, [fetchExams]);\r\n\r\n    // 선택된 시험의 문제 목록 가져오기\r\n    const fetchQuestions = useCallback(async (examId) => {\r\n        if (!examId) return;\r\n\r\n        try {\r\n            const response = await axios.get(`http://localhost:8090/api/exams/${examId}/questions`, {\r\n                headers: { Authorization: `Bearer ${token}` }\r\n            });\r\n            console.log(\"문제 목록 응답:\", response.data);\r\n            setQuestions(response.data); // 문제 목록 상태 업데이트\r\n        } catch (error) {\r\n            console.error(\"문제 목록 불러오기 오류:\", error.response ? error.response.data : error.message);\r\n        }\r\n    }, [token]);\r\n\r\n    const handleExamChange = (e) => {\r\n        const selectedExamId = e.target.value;\r\n        console.log(\"선택된 시험 ID:\", selectedExamId); // 추가된 로그\r\n        setExamId(selectedExamId); // 선택된 시험 ID 업데이트\r\n        fetchQuestions(selectedExamId); // 문제 목록 가져오기\r\n    };\r\n\r\n    const handleStartQuiz = () => {\r\n        if (examId) {\r\n            navigate(`/courses/${courseId}/quiz/${examId}`); // 퀴즈 시작 페이지로 이동\r\n        }\r\n    };\r\n\r\n    if (loading) return <div>📡 시험 목록 불러오는 중...</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h2>시험 선택</h2>\r\n            <label htmlFor=\"exam-select\">시험 선택:</label>\r\n            <select\r\n                id=\"exam-select\"\r\n                value={examId} // 초기값을 빈 문자열로 설정했으므로 null이 아닌 빈 문자열로 설정\r\n                onChange={handleExamChange} // 드롭다운에서 선택된 값을 examId에 저장하고 문제 리스트 가져오기\r\n            >\r\n                <option value=\"\">시험을 선택하세요</option>\r\n                {exams.map((exam) => (\r\n                    <option key={exam.id} value={exam.id}>\r\n                        {exam.title}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n\r\n            <h3>문제 목록</h3>\r\n            <ul>\r\n                {questions.map((question) => (\r\n                    <li key={question.id}>{question.text}</li> // 문제 텍스트를 리스트로 표시\r\n                ))}\r\n            </ul>\r\n\r\n            <button onClick={handleStartQuiz} className=\"start-btn\" disabled={!examId}>\r\n                퀴즈 시작\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExamSelection;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}