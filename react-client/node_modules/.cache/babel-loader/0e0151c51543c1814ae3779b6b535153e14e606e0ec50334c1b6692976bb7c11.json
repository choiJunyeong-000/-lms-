{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIG60309\\\\react-client\\\\src\\\\components\\\\VideoDetailPage.js\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoDetailPage = ({\n  videoUrl,\n  week\n}) => {\n  _s();\n  const videoRef = useRef(null);\n  const [isChecked, setIsChecked] = useState(false);\n  const [lastSavedProgress, setLastSavedProgress] = useState(0);\n  const [currentProgress, setCurrentProgress] = useState(0);\n  const progressSaveInterval = 5; // 5초마다 진도율 저장\n  const ATTENDANCE_THRESHOLD = 90; // 출석 인정 기준 시청률 (90%)\n  const [content, setContent] = useState(null);\n  const [isSaving, setIsSaving] = useState(false); // 저장 중 상태 추가\n  const token = localStorage.getItem('token');\n  const studentId = localStorage.getItem('studentId');\n  const courseId = localStorage.getItem('courseId');\n\n  // 디버깅용 로그\n  useEffect(() => {\n    if (studentId) {\n      console.log(\"studentId: \", studentId);\n    } else {\n      console.log(\"studentId가 localStorage에 없습니다.\");\n    }\n    if (courseId) {\n      console.log(\"courseId: \", courseId);\n    } else {\n      console.log(\"courseId가 localStorage에 없습니다.\");\n    }\n  }, []);\n\n  // 비디오 콘텐츠 로드\n  useEffect(() => {\n    const savedContent = sessionStorage.getItem(\"videoContent\");\n    if (savedContent) {\n      setContent(JSON.parse(savedContent));\n    }\n  }, []);\n\n  // 초기 출석 상태 및 진도율 확인\n  useEffect(() => {\n    const checkAttendanceStatus = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8090/api/attendance/status?studentId=${studentId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // courseId가 키인 맵에서 출석 상태를 확인\n        if (response.data && response.data[courseId] === true) {\n          setIsChecked(true);\n        }\n      } catch (error) {\n        console.error(\"출석 상태 확인 실패\", error);\n      }\n    };\n\n    // 이전 시청 진도율 확인\n    const checkProgressStatus = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8090/api/attendance/progress/status?studentId=${studentId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log(\"진도율 데이터:\", response.data);\n\n        // courseId가 키인 맵에서 진도율 확인 (courseId를 숫자로 변환해서 확인)\n        const numericCourseId = parseInt(courseId);\n        if (response.data && response.data[numericCourseId] !== undefined) {\n          const savedProgress = response.data[numericCourseId];\n          setLastSavedProgress(savedProgress);\n          setCurrentProgress(savedProgress);\n          console.log(\"저장된 진도율 확인됨:\", savedProgress);\n        }\n      } catch (error) {\n        console.error(\"진도율 확인 실패\", error);\n      }\n    };\n    if (studentId && courseId) {\n      checkAttendanceStatus();\n      checkProgressStatus();\n    }\n  }, [studentId, courseId, token]);\n\n  // 비디오 메타데이터 로드 완료 후 진도율에 따라 영상 위치 설정\n  const handleLoadedMetadata = () => {\n    if (videoRef.current && lastSavedProgress > 0) {\n      const duration = videoRef.current.duration;\n      const newTime = lastSavedProgress / 100 * duration;\n      console.log(`비디오 시간 설정: ${newTime}초 (진도율 ${lastSavedProgress}%)`);\n      videoRef.current.currentTime = newTime;\n    }\n  };\n\n  // 주기적으로 진도율 저장\n  useEffect(() => {\n    let intervalId;\n\n    // 비디오가 로드된 후에만 인터벌 설정\n    if (videoRef.current) {\n      intervalId = setInterval(() => {\n        saveCurrentProgress();\n      }, progressSaveInterval * 1000);\n    }\n\n    // 컴포넌트 언마운트 시 인터벌 클리어\n    return () => {\n      if (intervalId) clearInterval(intervalId);\n    };\n  }, [videoRef.current]); // videoRef.current가 변경될 때만 실행\n\n  // 현재 진도율 저장\n  const saveCurrentProgress = async () => {\n    if (!videoRef.current || !studentId || !courseId || isSaving) return;\n    const video = videoRef.current;\n    if (video.paused || !video.duration) return; // 동영상이 일시정지 상태거나 로드되지 않은 경우\n\n    const watchedPercentage = video.currentTime / video.duration * 100;\n\n    // 진행률 상태 업데이트\n    setCurrentProgress(watchedPercentage);\n\n    // 이미 출석이 완료되었거나 진도율 변화가 1% 미만인 경우 저장하지 않음\n    if (Math.abs(watchedPercentage - lastSavedProgress) < 1) return;\n    setIsSaving(true); // 저장 시작\n\n    try {\n      // courseId를 숫자로 변환\n      const numericCourseId = parseInt(courseId);\n\n      // 진도율 저장 API 호출\n      const response = await axios.post(\"http://localhost:8090/api/attendance/progress/course\", {\n        studentId,\n        videoId: numericCourseId,\n        // courseId를 숫자로 변환하여 전송\n        watchedPercentage\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"진도율 저장됨:\", watchedPercentage.toFixed(2) + \"%\", response.data);\n      setLastSavedProgress(watchedPercentage);\n\n      // 저장 후 진도율 상태 다시 확인\n      refreshProgressStatus();\n    } catch (error) {\n      console.error(\"진도율 저장 실패\", error);\n    } finally {\n      setIsSaving(false); // 저장 완료\n    }\n  };\n\n  // 진도율 상태 새로고침\n  const refreshProgressStatus = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8090/api/attendance/progress/status?studentId=${studentId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"새로 가져온 진도율 데이터:\", response.data);\n\n      // courseId가 키인 맵에서 진도율 확인\n      const numericCourseId = parseInt(courseId);\n      if (response.data && response.data[numericCourseId] !== undefined) {\n        const savedProgress = response.data[numericCourseId];\n        setLastSavedProgress(savedProgress);\n        console.log(\"업데이트된 저장된 진도율:\", savedProgress);\n      }\n    } catch (error) {\n      console.error(\"진도율 새로고침 실패\", error);\n    }\n  };\n\n  // 비디오 종료 시 진행률 100%로 저장\n  const handleVideoEnded = async () => {\n    if (isSaving) return;\n    setIsSaving(true);\n    try {\n      // courseId를 숫자로 변환\n      const numericCourseId = parseInt(courseId);\n      await axios.post(\"http://localhost:8090/api/attendance/progress/course\", {\n        studentId,\n        videoId: numericCourseId,\n        watchedPercentage: 100\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setLastSavedProgress(100);\n      setCurrentProgress(100);\n      console.log(\"비디오 완료: 진도율 100% 저장됨\");\n\n      // 저장 후 진도율 상태 다시 확인\n      refreshProgressStatus();\n\n      // 출석 체크가 안 되어 있으면 자동으로 체크\n      if (!isChecked && content !== null && content !== void 0 && content.id) {\n        handleCourseAttendance();\n      }\n    } catch (error) {\n      console.error(\"최종 진도율 저장 실패\", error);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // 영상 시청 중 처리\n  const handleTimeUpdate = async () => {\n    if (!videoRef.current || !studentId || !courseId) return;\n    const video = videoRef.current;\n    if (!video.duration) return;\n    const watchedPercentage = video.currentTime / video.duration * 100;\n\n    // 현재 진행률 상태 업데이트\n    setCurrentProgress(watchedPercentage);\n\n    // 시청률이 출석 인정 기준을 넘었고 아직 출석 체크가 안 되어 있을 때\n    if (watchedPercentage >= ATTENDANCE_THRESHOLD && !isChecked) {\n      if (!content || !content.id) {\n        console.error(\"contentId가 존재하지 않습니다.\");\n        return;\n      }\n      try {\n        const response = await axios.post(\"http://localhost:8090/api/attendance/course\", {\n          studentId,\n          courseId: parseInt(courseId),\n          // courseId를 숫자로 변환\n          contentId: content.id,\n          watchedPercentage\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.data === \"출석 완료\") {\n          setIsChecked(true);\n          console.log(\"출석 체크 완료\");\n        }\n      } catch (error) {\n        console.error(\"강의 출석 체크 실패\", error);\n      }\n    }\n  };\n\n  // 수동 출석 체크 (강의 단위)\n  const handleCourseAttendance = async () => {\n    if (!content || !content.id) {\n      console.error(\"contentId가 존재하지 않습니다.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:8090/api/attendance/course\", {\n        studentId,\n        courseId: parseInt(courseId),\n        // courseId를 숫자로 변환\n        contentId: content.id,\n        watchedPercentage: 100\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.data === \"출석 완료\") {\n        setIsChecked(true);\n        console.log(\"수동 출석 체크 완료\");\n      }\n    } catch (error) {\n      console.error(\"강의 출석 체크 실패\", error);\n    }\n  };\n\n  // 수동으로 진도율 저장 요청\n  const handleManualSaveProgress = async () => {\n    if (!videoRef.current) return;\n    const video = videoRef.current;\n    if (!video.duration) return;\n    const watchedPercentage = video.currentTime / video.duration * 100;\n    setIsSaving(true);\n    try {\n      // courseId를 숫자로 변환\n      const numericCourseId = parseInt(courseId);\n      const response = await axios.post(\"http://localhost:8090/api/attendance/progress/course\", {\n        studentId,\n        videoId: numericCourseId,\n        watchedPercentage\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"수동 진도율 저장됨:\", watchedPercentage.toFixed(2) + \"%\", response.data);\n\n      // 저장 후 새로고침\n      await refreshProgressStatus();\n      alert(\"진도율이 저장되었습니다: \" + watchedPercentage.toFixed(2) + \"%\");\n    } catch (error) {\n      console.error(\"수동 진도율 저장 실패\", error);\n      alert(\"진도율 저장에 실패했습니다: \" + error.message);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  if (!content) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 14\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-player-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      controls: true,\n      autoPlay: true,\n      onTimeUpdate: handleTimeUpdate,\n      onLoadedMetadata: handleLoadedMetadata,\n      onEnded: handleVideoEnded,\n      width: \"640\",\n      height: \"360\",\n      className: \"main-video\",\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: content === null || content === void 0 ? void 0 : content.filePath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this), \"\\uBE0C\\uB77C\\uC6B0\\uC800\\uAC00 \\uBE44\\uB514\\uC624 \\uD0DC\\uADF8\\uB97C \\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attendance-status\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uD604\\uC7AC \\uC9C4\\uB3C4\\uC728: \", currentProgress.toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC800\\uC7A5\\uB41C \\uC9C4\\uB3C4\\uC728: \", lastSavedProgress.toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleManualSaveProgress,\n          disabled: isSaving,\n          className: \"progress-save-button\",\n          children: isSaving ? '저장 중...' : '진도율 수동 저장'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"attendance-label\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isChecked,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this), \"\\uCD9C\\uC11D \\uC644\\uB8CC \", isChecked ? '✓' : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this), !isChecked && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"attendance-button\",\n        onClick: handleCourseAttendance,\n        children: \"\\uC218\\uB3D9 \\uCD9C\\uC11D \\uCCB4\\uD06C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 7\n  }, this);\n};\n_s(VideoDetailPage, \"ucXW8YGZz1uNwP6aQvxahByIGew=\");\n_c = VideoDetailPage;\nexport default VideoDetailPage;\nvar _c;\n$RefreshReg$(_c, \"VideoDetailPage\");","map":{"version":3,"names":["useRef","useEffect","useState","axios","jsxDEV","_jsxDEV","VideoDetailPage","videoUrl","week","_s","videoRef","isChecked","setIsChecked","lastSavedProgress","setLastSavedProgress","currentProgress","setCurrentProgress","progressSaveInterval","ATTENDANCE_THRESHOLD","content","setContent","isSaving","setIsSaving","token","localStorage","getItem","studentId","courseId","console","log","savedContent","sessionStorage","JSON","parse","checkAttendanceStatus","response","get","headers","Authorization","data","error","checkProgressStatus","numericCourseId","parseInt","undefined","savedProgress","handleLoadedMetadata","current","duration","newTime","currentTime","intervalId","setInterval","saveCurrentProgress","clearInterval","video","paused","watchedPercentage","Math","abs","post","videoId","toFixed","refreshProgressStatus","handleVideoEnded","id","handleCourseAttendance","handleTimeUpdate","contentId","handleManualSaveProgress","alert","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","controls","autoPlay","onTimeUpdate","onLoadedMetadata","onEnded","width","height","src","filePath","onClick","disabled","type","checked","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/BIG60309/react-client/src/components/VideoDetailPage.js"],"sourcesContent":["import { useRef, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst VideoDetailPage = ({ videoUrl, week }) => {\r\n    const videoRef = useRef(null);\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const [lastSavedProgress, setLastSavedProgress] = useState(0);\r\n    const [currentProgress, setCurrentProgress] = useState(0);\r\n    const progressSaveInterval = 5; // 5초마다 진도율 저장\r\n    const ATTENDANCE_THRESHOLD = 90; // 출석 인정 기준 시청률 (90%)\r\n    const [content, setContent] = useState(null);\r\n    const [isSaving, setIsSaving] = useState(false); // 저장 중 상태 추가\r\n    const token = localStorage.getItem('token');\r\n    const studentId = localStorage.getItem('studentId');\r\n    const courseId = localStorage.getItem('courseId');\r\n\r\n    // 디버깅용 로그\r\n    useEffect(() => {\r\n      if (studentId) {\r\n        console.log(\"studentId: \", studentId);\r\n      } else {\r\n        console.log(\"studentId가 localStorage에 없습니다.\");\r\n      }\r\n\r\n      if (courseId) {\r\n        console.log(\"courseId: \", courseId);\r\n      } else {\r\n        console.log(\"courseId가 localStorage에 없습니다.\");\r\n      }\r\n    }, []);\r\n\r\n    // 비디오 콘텐츠 로드\r\n    useEffect(() => {\r\n        const savedContent = sessionStorage.getItem(\"videoContent\");\r\n        if (savedContent) {\r\n          setContent(JSON.parse(savedContent));\r\n        }\r\n    }, []);\r\n\r\n    // 초기 출석 상태 및 진도율 확인\r\n    useEffect(() => {\r\n      const checkAttendanceStatus = async () => {\r\n        try {\r\n          const response = await axios.get(\r\n            `http://localhost:8090/api/attendance/status?studentId=${studentId}`,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n          \r\n          // courseId가 키인 맵에서 출석 상태를 확인\r\n          if (response.data && response.data[courseId] === true) {\r\n            setIsChecked(true);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"출석 상태 확인 실패\", error);\r\n        }\r\n      };\r\n    \r\n      // 이전 시청 진도율 확인\r\n      const checkProgressStatus = async () => {\r\n        try {\r\n          const response = await axios.get(\r\n            `http://localhost:8090/api/attendance/progress/status?studentId=${studentId}`,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n          \r\n          console.log(\"진도율 데이터:\", response.data);\r\n          \r\n          // courseId가 키인 맵에서 진도율 확인 (courseId를 숫자로 변환해서 확인)\r\n          const numericCourseId = parseInt(courseId);\r\n          if (response.data && response.data[numericCourseId] !== undefined) {\r\n            const savedProgress = response.data[numericCourseId];\r\n            setLastSavedProgress(savedProgress);\r\n            setCurrentProgress(savedProgress);\r\n            console.log(\"저장된 진도율 확인됨:\", savedProgress);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"진도율 확인 실패\", error);\r\n        }\r\n      };\r\n      \r\n      if (studentId && courseId) {\r\n        checkAttendanceStatus();\r\n        checkProgressStatus();\r\n      }\r\n    }, [studentId, courseId, token]);\r\n  \r\n    // 비디오 메타데이터 로드 완료 후 진도율에 따라 영상 위치 설정\r\n    const handleLoadedMetadata = () => {\r\n      if (videoRef.current && lastSavedProgress > 0) {\r\n        const duration = videoRef.current.duration;\r\n        const newTime = (lastSavedProgress / 100) * duration;\r\n        console.log(`비디오 시간 설정: ${newTime}초 (진도율 ${lastSavedProgress}%)`);\r\n        videoRef.current.currentTime = newTime;\r\n      }\r\n    };\r\n    \r\n    // 주기적으로 진도율 저장\r\n    useEffect(() => {\r\n      let intervalId;\r\n      \r\n      // 비디오가 로드된 후에만 인터벌 설정\r\n      if (videoRef.current) {\r\n        intervalId = setInterval(() => {\r\n          saveCurrentProgress();\r\n        }, progressSaveInterval * 1000);\r\n      }\r\n      \r\n      // 컴포넌트 언마운트 시 인터벌 클리어\r\n      return () => {\r\n        if (intervalId) clearInterval(intervalId);\r\n      };\r\n    }, [videoRef.current]); // videoRef.current가 변경될 때만 실행\r\n    \r\n    // 현재 진도율 저장\r\n    const saveCurrentProgress = async () => {\r\n      if (!videoRef.current || !studentId || !courseId || isSaving) return;\r\n      \r\n      const video = videoRef.current;\r\n      if (video.paused || !video.duration) return; // 동영상이 일시정지 상태거나 로드되지 않은 경우\r\n      \r\n      const watchedPercentage = (video.currentTime / video.duration) * 100;\r\n      \r\n      // 진행률 상태 업데이트\r\n      setCurrentProgress(watchedPercentage);\r\n      \r\n      // 이미 출석이 완료되었거나 진도율 변화가 1% 미만인 경우 저장하지 않음\r\n      if (Math.abs(watchedPercentage - lastSavedProgress) < 1) return;\r\n      \r\n      setIsSaving(true); // 저장 시작\r\n      \r\n      try {\r\n        // courseId를 숫자로 변환\r\n        const numericCourseId = parseInt(courseId);\r\n        \r\n        // 진도율 저장 API 호출\r\n        const response = await axios.post(\r\n          \"http://localhost:8090/api/attendance/progress/course\",\r\n          { \r\n            studentId, \r\n            videoId: numericCourseId, // courseId를 숫자로 변환하여 전송\r\n            watchedPercentage \r\n          },\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n        \r\n        console.log(\"진도율 저장됨:\", watchedPercentage.toFixed(2) + \"%\", response.data);\r\n        setLastSavedProgress(watchedPercentage);\r\n        \r\n        // 저장 후 진도율 상태 다시 확인\r\n        refreshProgressStatus();\r\n      } catch (error) {\r\n        console.error(\"진도율 저장 실패\", error);\r\n      } finally {\r\n        setIsSaving(false); // 저장 완료\r\n      }\r\n    };\r\n    \r\n    // 진도율 상태 새로고침\r\n    const refreshProgressStatus = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:8090/api/attendance/progress/status?studentId=${studentId}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n        \r\n        console.log(\"새로 가져온 진도율 데이터:\", response.data);\r\n        \r\n        // courseId가 키인 맵에서 진도율 확인\r\n        const numericCourseId = parseInt(courseId);\r\n        if (response.data && response.data[numericCourseId] !== undefined) {\r\n          const savedProgress = response.data[numericCourseId];\r\n          setLastSavedProgress(savedProgress);\r\n          console.log(\"업데이트된 저장된 진도율:\", savedProgress);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"진도율 새로고침 실패\", error);\r\n      }\r\n    };\r\n    \r\n    // 비디오 종료 시 진행률 100%로 저장\r\n    const handleVideoEnded = async () => {\r\n      if (isSaving) return;\r\n      \r\n      setIsSaving(true);\r\n      \r\n      try {\r\n        // courseId를 숫자로 변환\r\n        const numericCourseId = parseInt(courseId);\r\n        \r\n        await axios.post(\r\n          \"http://localhost:8090/api/attendance/progress/course\",\r\n          { \r\n            studentId, \r\n            videoId: numericCourseId,\r\n            watchedPercentage: 100 \r\n          },\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n        \r\n        setLastSavedProgress(100);\r\n        setCurrentProgress(100);\r\n        console.log(\"비디오 완료: 진도율 100% 저장됨\");\r\n        \r\n        // 저장 후 진도율 상태 다시 확인\r\n        refreshProgressStatus();\r\n        \r\n        // 출석 체크가 안 되어 있으면 자동으로 체크\r\n        if (!isChecked && content?.id) {\r\n          handleCourseAttendance();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"최종 진도율 저장 실패\", error);\r\n      } finally {\r\n        setIsSaving(false);\r\n      }\r\n    };\r\n    \r\n    // 영상 시청 중 처리\r\n    const handleTimeUpdate = async () => {\r\n      if (!videoRef.current || !studentId || !courseId) return;\r\n      \r\n      const video = videoRef.current;\r\n      if (!video.duration) return;\r\n      \r\n      const watchedPercentage = (video.currentTime / video.duration) * 100;\r\n      \r\n      // 현재 진행률 상태 업데이트\r\n      setCurrentProgress(watchedPercentage);\r\n    \r\n      // 시청률이 출석 인정 기준을 넘었고 아직 출석 체크가 안 되어 있을 때\r\n      if (watchedPercentage >= ATTENDANCE_THRESHOLD && !isChecked) {\r\n        if (!content || !content.id) {\r\n          console.error(\"contentId가 존재하지 않습니다.\");\r\n          return;\r\n        }\r\n    \r\n        try {\r\n          const response = await axios.post(\r\n            \"http://localhost:8090/api/attendance/course\",\r\n            { \r\n              studentId, \r\n              courseId: parseInt(courseId), // courseId를 숫자로 변환\r\n              contentId: content.id,\r\n              watchedPercentage \r\n            },\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n    \r\n          if (response.data === \"출석 완료\") {\r\n            setIsChecked(true);\r\n            console.log(\"출석 체크 완료\");\r\n          }\r\n        } catch (error) {\r\n          console.error(\"강의 출석 체크 실패\", error);\r\n        }\r\n      }\r\n    };\r\n    \r\n    // 수동 출석 체크 (강의 단위)\r\n    const handleCourseAttendance = async () => {\r\n      if (!content || !content.id) {\r\n        console.error(\"contentId가 존재하지 않습니다.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://localhost:8090/api/attendance/course\",\r\n          { \r\n            studentId, \r\n            courseId: parseInt(courseId), // courseId를 숫자로 변환\r\n            contentId: content.id,\r\n            watchedPercentage: 100 \r\n          },\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n        \r\n        if (response.data === \"출석 완료\") {\r\n          setIsChecked(true);\r\n          console.log(\"수동 출석 체크 완료\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"강의 출석 체크 실패\", error);\r\n      }\r\n    };\r\n    \r\n    // 수동으로 진도율 저장 요청\r\n    const handleManualSaveProgress = async () => {\r\n      if (!videoRef.current) return;\r\n      \r\n      const video = videoRef.current;\r\n      if (!video.duration) return;\r\n      \r\n      const watchedPercentage = (video.currentTime / video.duration) * 100;\r\n      \r\n      setIsSaving(true);\r\n      \r\n      try {\r\n        // courseId를 숫자로 변환\r\n        const numericCourseId = parseInt(courseId);\r\n        \r\n        const response = await axios.post(\r\n          \"http://localhost:8090/api/attendance/progress/course\",\r\n          { \r\n            studentId, \r\n            videoId: numericCourseId,\r\n            watchedPercentage \r\n          },\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n        \r\n        console.log(\"수동 진도율 저장됨:\", watchedPercentage.toFixed(2) + \"%\", response.data);\r\n        \r\n        // 저장 후 새로고침\r\n        await refreshProgressStatus();\r\n        \r\n        alert(\"진도율이 저장되었습니다: \" + watchedPercentage.toFixed(2) + \"%\");\r\n      } catch (error) {\r\n        console.error(\"수동 진도율 저장 실패\", error);\r\n        alert(\"진도율 저장에 실패했습니다: \" + error.message);\r\n      } finally {\r\n        setIsSaving(false);\r\n      }\r\n    };\r\n\r\n    if (!content) {\r\n      return <p>로딩 중...</p>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"video-player-container\">\r\n        <video\r\n          ref={videoRef}\r\n          controls\r\n          autoPlay\r\n          onTimeUpdate={handleTimeUpdate}\r\n          onLoadedMetadata={handleLoadedMetadata}\r\n          onEnded={handleVideoEnded}\r\n          width=\"640\"\r\n          height=\"360\"\r\n          className=\"main-video\"\r\n        >\r\n          <source src={content?.filePath} />\r\n          브라우저가 비디오 태그를 지원하지 않습니다.\r\n        </video>\r\n        \r\n        <div className=\"attendance-status\">\r\n          <div className=\"progress-info\">\r\n            <p>현재 진도율: {currentProgress.toFixed(2)}%</p>\r\n            <p>저장된 진도율: {lastSavedProgress.toFixed(2)}%</p>\r\n            <button \r\n              onClick={handleManualSaveProgress} \r\n              disabled={isSaving}\r\n              className=\"progress-save-button\"\r\n            >\r\n              {isSaving ? '저장 중...' : '진도율 수동 저장'}\r\n            </button>\r\n          </div>\r\n          <label className=\"attendance-label\">\r\n            <input type=\"checkbox\" checked={isChecked} readOnly />\r\n            출석 완료 {isChecked ? '✓' : ''}\r\n          </label>\r\n          {!isChecked && (\r\n            <button \r\n              className=\"attendance-button\" \r\n              onClick={handleCourseAttendance}\r\n            >\r\n              수동 출석 체크\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default VideoDetailPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}