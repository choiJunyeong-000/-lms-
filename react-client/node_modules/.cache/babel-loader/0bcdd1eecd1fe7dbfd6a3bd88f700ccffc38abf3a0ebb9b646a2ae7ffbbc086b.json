{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIG60309\\\\react-client\\\\src\\\\components\\\\KocwCoursePage.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KocwCoursePage() {\n  _s();\n  const [videoList, setVideoList] = useState([]);\n  const [videoProgress, setVideoProgress] = useState({});\n  const [attendanceStatus, setAttendanceStatus] = useState({});\n\n  // 토큰을 가져오는 함수\n  const getAuthToken = () => {\n    const token = localStorage.getItem(\"token\");\n    return token ? `Bearer ${token}` : null;\n  };\n\n  // 현재 로그인한 사용자의 ID를 가져오는 함수\n  const getCurrentUserId = () => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return null;\n    try {\n      const payload = JSON.parse(atob(token.split(\".\")[1])); // JWT payload 디코딩\n      return payload.sub; // `sub`을 학생 ID로 사용\n    } catch (error) {\n      console.error(\"Error extracting userId from token:\", error);\n      return null;\n    }\n  };\n\n  // 비디오 목록을 가져오는 함수\n  const fetchVideoList = async () => {\n    try {\n      const token = getAuthToken();\n      if (!token) {\n        alert(\"로그인이 필요합니다.\");\n        return;\n      }\n      const response = await axios.get(\"http://localhost:8090/api/lectures/list\", {\n        headers: {\n          Authorization: token // 인증 토큰 추가\n        }\n      });\n      setVideoList(response.data);\n    } catch (error) {\n      console.error(\"비디오 목록 조회 실패\", error);\n      alert(\"비디오 목록을 불러올 수 없습니다.\");\n    }\n  };\n\n  // 진도율 상태를 가져오는 함수\n  const fetchProgressStatus = async () => {\n    try {\n      const token = getAuthToken();\n      const studentId = getCurrentUserId();\n      if (!token || !studentId) {\n        alert(\"로그인이 필요합니다.\");\n        return;\n      }\n      const response = await axios.get(\"http://localhost:8090/api/attendance/progress/status\", {\n        params: {\n          studentId\n        },\n        headers: {\n          Authorization: token // 인증 토큰 추가\n        }\n      });\n      setVideoProgress(response.data);\n    } catch (error) {\n      console.error(\"진도율 상태 조회 실패\", error);\n      alert(\"진도율 상태를 불러올 수 없습니다.\");\n    }\n  };\n\n  // 출석 상태를 가져오는 함수\n  const fetchAttendanceStatus = async () => {\n    try {\n      const studentId = getCurrentUserId();\n      if (!studentId) {\n        alert(\"로그인이 필요합니다.\");\n        return;\n      }\n      const token = getAuthToken();\n      const response = await axios.get(\"http://localhost:8090/api/attendance/status\", {\n        params: {\n          studentId\n        },\n        headers: {\n          Authorization: token // 인증 토큰 추가\n        }\n      });\n\n      // 응답 데이터가 배열이 아니라면 상태가 객체일 수 있으므로, 이를 처리\n      if (response.data && typeof response.data === \"object\") {\n        setAttendanceStatus(response.data);\n      } else {\n        console.error(\"출석 상태 데이터가 잘못되었습니다\", response.data);\n      }\n    } catch (error) {\n      console.error(\"출석 상태 조회 실패\", error);\n      alert(\"출석 상태를 불러올 수 없습니다.\");\n    }\n  };\n\n  // 시청하지 않은 부분으로 이동하려는 경우를 처리하는 함수\n  const handleSeeking = (event, videoId) => {\n    const currentTime = event.target.currentTime;\n    const lastWatchedProgress = videoProgress[videoId] || 0;\n    const duration = event.target.duration;\n\n    // 출석이 완료된 강의라면 자유롭게 시청 가능\n    if (attendanceStatus[videoId]) {\n      return; // 출석이 완료되었으면 아무 제약 없이 시청할 수 있음\n    }\n\n    // 현재 시청한 진도율을 기준으로 이동을 제한 (진도율 이상으로 이동 못하게)\n    const maxSeekableTime = lastWatchedProgress / 100 * duration;\n    if (currentTime > maxSeekableTime) {\n      event.preventDefault(); // 기본 이동 동작을 방지\n      event.target.currentTime = maxSeekableTime; // 시청한 부분으로 돌아가게 설정\n      alert(\"시청하지 않은 부분으로 이동할 수 없습니다.\");\n    }\n  };\n\n  // 비디오의 시청 진행률을 업데이트하는 함수\n  const handleTimeUpdate = async (event, videoId) => {\n    const currentTime = event.target.currentTime;\n    const duration = event.target.duration;\n    const progress = currentTime / duration * 100;\n\n    // 진도율 업데이트 (사용자가 시청한 부분만 저장)\n    setVideoProgress(prevProgress => ({\n      ...prevProgress,\n      [videoId]: progress\n    }));\n    const studentId = getCurrentUserId();\n    if (!studentId) {\n      alert(\"회원 ID가 없습니다.\");\n      return;\n    }\n    try {\n      const token = getAuthToken();\n      if (!token) {\n        alert(\"로그인이 필요합니다.\");\n        return;\n      }\n\n      // 현재 저장된 진도율을 가져오기\n      const currentProgress = videoProgress[videoId] || 0;\n\n      // 진도율이 변화했다면 업데이트\n      if (progress > currentProgress) {\n        // 진도율 저장을 위한 API 요청\n        await axios.post(\"http://localhost:8090/api/attendance/progress/video\", {\n          studentId: studentId,\n          videoId: videoId,\n          watchedPercentage: progress\n        }, {\n          headers: {\n            Authorization: token,\n            // 인증 토큰 추가\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // 출석 처리 (진도율이 90% 이상이면 출석 처리)\n        if (progress >= 90) {\n          await handleAttendance(videoId, progress); // 진도율을 그대로 출석 처리\n        }\n      }\n    } catch (error) {\n      console.error(\"진도율 업데이트 실패\", error);\n      if (error.response) {\n        alert(error.response.data);\n      } else {\n        alert(\"진도율 업데이트 실패\");\n      }\n    }\n  };\n\n  // 출석을 처리하는 함수\n  const handleAttendance = async (videoId, progress) => {\n    const studentId = getCurrentUserId(); // 로그인된 사용자의 ID 가져오기\n\n    try {\n      const token = getAuthToken();\n      if (!token) {\n        alert(\"로그인이 필요합니다.\");\n        return;\n      }\n      if (!studentId) {\n        alert(\"회원 ID가 없습니다.\");\n        return;\n      }\n\n      // 출석 처리를 위한 API 요청\n      const response = await axios.post(\"http://localhost:8090/api/attendance/video\", {\n        studentId: studentId,\n        // 회원 ID 추가\n        videoId: videoId,\n        watchedPercentage: progress // 시청 진도율을 사용\n      }, {\n        headers: {\n          Authorization: token,\n          // 인증 토큰 추가\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // 출석 완료 알림을 한 번만 출력\n      if (!attendanceStatus[videoId]) {\n        alert(response.data);\n      }\n      setAttendanceStatus(prevStatus => ({\n        ...prevStatus,\n        [videoId]: true\n      }));\n    } catch (error) {\n      console.error(\"출석 처리 실패\", error);\n      if (error.response) {\n        alert(error.response.data);\n      } else {\n        alert(\"출석 처리가 실패했습니다.\");\n      }\n    }\n  };\n\n  // 컴포넌트 마운트 시 비디오 목록과 출석 상태, 진도율 상태를 가져옵니다.\n  useEffect(() => {\n    fetchVideoList();\n    fetchProgressStatus();\n    fetchAttendanceStatus(); // 출석 상태도 함께 가져옵니다.\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uAC15\\uC758 \\uBE44\\uB514\\uC624 \\uC5C5\\uB85C\\uB4DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC5C5\\uB85C\\uB4DC\\uB41C \\uBE44\\uB514\\uC624 \\uBAA9\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: videoList.map(video => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          width: \"300\",\n          controls: true\n          // 진도율을 기준으로 초기 currentTime 설정\n          ,\n          onLoadedMetadata: event => {\n            const savedProgress = videoProgress[video.id] || 0;\n            const duration = event.target.duration;\n            const initialTime = savedProgress / 100 * duration;\n            event.target.currentTime = initialTime; // 초기 시점 설정\n          },\n          onTimeUpdate: event => handleTimeUpdate(event, video.id),\n          onSeeking: event => handleSeeking(event, video.id) // 바를 강제로 움직일 때 처리\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: `http://localhost:8090/${video.videoUrl}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC2DC\\uCCAD \\uC9C4\\uD589\\uB960: \", (videoProgress[video.id] || 0).toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: attendanceStatus[video.id] || false,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this)]\n      }, video.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n}\n_s(KocwCoursePage, \"hdLdo/Js/7Z2C6VmA8QIcxqzx9M=\");\n_c = KocwCoursePage;\nexport default KocwCoursePage;\nvar _c;\n$RefreshReg$(_c, \"KocwCoursePage\");","map":{"version":3,"names":["useState","useEffect","axios","jsxDEV","_jsxDEV","KocwCoursePage","_s","videoList","setVideoList","videoProgress","setVideoProgress","attendanceStatus","setAttendanceStatus","getAuthToken","token","localStorage","getItem","getCurrentUserId","payload","JSON","parse","atob","split","sub","error","console","fetchVideoList","alert","response","get","headers","Authorization","data","fetchProgressStatus","studentId","params","fetchAttendanceStatus","handleSeeking","event","videoId","currentTime","target","lastWatchedProgress","duration","maxSeekableTime","preventDefault","handleTimeUpdate","progress","prevProgress","currentProgress","post","watchedPercentage","handleAttendance","prevStatus","children","fileName","_jsxFileName","lineNumber","columnNumber","map","video","width","controls","onLoadedMetadata","savedProgress","id","initialTime","onTimeUpdate","onSeeking","src","videoUrl","toFixed","type","checked","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/BIG60309/react-client/src/components/KocwCoursePage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction KocwCoursePage() {\r\n  const [videoList, setVideoList] = useState([]);\r\n  const [videoProgress, setVideoProgress] = useState({});\r\n  const [attendanceStatus, setAttendanceStatus] = useState({});\r\n\r\n  // 토큰을 가져오는 함수\r\n  const getAuthToken = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    return token ? `Bearer ${token}` : null;\r\n  };\r\n\r\n  // 현재 로그인한 사용자의 ID를 가져오는 함수\r\n  const getCurrentUserId = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) return null;\r\n  \r\n    try {\r\n      const payload = JSON.parse(atob(token.split(\".\")[1])); // JWT payload 디코딩\r\n      return payload.sub; // `sub`을 학생 ID로 사용\r\n    } catch (error) {\r\n      console.error(\"Error extracting userId from token:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // 비디오 목록을 가져오는 함수\r\n  const fetchVideoList = async () => {\r\n    try {\r\n      const token = getAuthToken();\r\n      if (!token) {\r\n        alert(\"로그인이 필요합니다.\");\r\n        return;\r\n      }\r\n\r\n      const response = await axios.get(\"http://localhost:8090/api/lectures/list\", {\r\n        headers: {\r\n          Authorization: token,  // 인증 토큰 추가\r\n        },\r\n      });\r\n      setVideoList(response.data);\r\n    } catch (error) {\r\n      console.error(\"비디오 목록 조회 실패\", error);\r\n      alert(\"비디오 목록을 불러올 수 없습니다.\");\r\n    }\r\n  };\r\n\r\n  // 진도율 상태를 가져오는 함수\r\n  const fetchProgressStatus = async () => {\r\n    try {\r\n      const token = getAuthToken();\r\n      const studentId = getCurrentUserId();\r\n      if (!token || !studentId) {\r\n        alert(\"로그인이 필요합니다.\");\r\n        return;\r\n      }\r\n\r\n      const response = await axios.get(\"http://localhost:8090/api/attendance/progress/status\", {\r\n        params: { studentId },\r\n        headers: {\r\n          Authorization: token,  // 인증 토큰 추가\r\n        },\r\n      });\r\n      setVideoProgress(response.data);\r\n    } catch (error) {\r\n      console.error(\"진도율 상태 조회 실패\", error);\r\n      alert(\"진도율 상태를 불러올 수 없습니다.\");\r\n    }\r\n  };\r\n\r\n  // 출석 상태를 가져오는 함수\r\n  const fetchAttendanceStatus = async () => {\r\n    try {\r\n      const studentId = getCurrentUserId();\r\n      if (!studentId) {\r\n        alert(\"로그인이 필요합니다.\");\r\n        return;\r\n      }\r\n\r\n      const token = getAuthToken();\r\n      const response = await axios.get(\"http://localhost:8090/api/attendance/status\", {\r\n        params: { studentId },\r\n        headers: {\r\n          Authorization: token,  // 인증 토큰 추가\r\n        },\r\n      });\r\n\r\n      // 응답 데이터가 배열이 아니라면 상태가 객체일 수 있으므로, 이를 처리\r\n      if (response.data && typeof response.data === \"object\") {\r\n        setAttendanceStatus(response.data);\r\n      } else {\r\n        console.error(\"출석 상태 데이터가 잘못되었습니다\", response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"출석 상태 조회 실패\", error);\r\n      alert(\"출석 상태를 불러올 수 없습니다.\");\r\n    }\r\n  };\r\n\r\n  // 시청하지 않은 부분으로 이동하려는 경우를 처리하는 함수\r\n  const handleSeeking = (event, videoId) => {\r\n    const currentTime = event.target.currentTime;\r\n    const lastWatchedProgress = videoProgress[videoId] || 0;\r\n    const duration = event.target.duration;\r\n  \r\n    // 출석이 완료된 강의라면 자유롭게 시청 가능\r\n    if (attendanceStatus[videoId]) {\r\n      return; // 출석이 완료되었으면 아무 제약 없이 시청할 수 있음\r\n    }\r\n  \r\n    // 현재 시청한 진도율을 기준으로 이동을 제한 (진도율 이상으로 이동 못하게)\r\n    const maxSeekableTime = (lastWatchedProgress / 100) * duration;\r\n  \r\n    if (currentTime > maxSeekableTime) {\r\n      event.preventDefault();  // 기본 이동 동작을 방지\r\n      event.target.currentTime = maxSeekableTime; // 시청한 부분으로 돌아가게 설정\r\n      alert(\"시청하지 않은 부분으로 이동할 수 없습니다.\");\r\n    }\r\n  };\r\n  \r\n\r\n  // 비디오의 시청 진행률을 업데이트하는 함수\r\n  const handleTimeUpdate = async (event, videoId) => {\r\n    const currentTime = event.target.currentTime;\r\n    const duration = event.target.duration;\r\n    const progress = (currentTime / duration) * 100;\r\n\r\n    // 진도율 업데이트 (사용자가 시청한 부분만 저장)\r\n    setVideoProgress((prevProgress) => ({\r\n      ...prevProgress,\r\n      [videoId]: progress,\r\n    }));\r\n\r\n    const studentId = getCurrentUserId();\r\n    if (!studentId) {\r\n      alert(\"회원 ID가 없습니다.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const token = getAuthToken();\r\n      if (!token) {\r\n        alert(\"로그인이 필요합니다.\");\r\n        return;\r\n      }\r\n\r\n      // 현재 저장된 진도율을 가져오기\r\n      const currentProgress = videoProgress[videoId] || 0;\r\n\r\n      // 진도율이 변화했다면 업데이트\r\n      if (progress > currentProgress) {\r\n        // 진도율 저장을 위한 API 요청\r\n        await axios.post(\r\n          \"http://localhost:8090/api/attendance/progress/video\",\r\n          {\r\n            studentId: studentId,\r\n            videoId: videoId,\r\n            watchedPercentage: progress,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: token,  // 인증 토큰 추가\r\n              'Content-Type': 'application/json',\r\n            },\r\n          }\r\n        );\r\n\r\n        // 출석 처리 (진도율이 90% 이상이면 출석 처리)\r\n        if (progress >= 90) {\r\n          await handleAttendance(videoId, progress);  // 진도율을 그대로 출석 처리\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"진도율 업데이트 실패\", error);\r\n      if (error.response) {\r\n        alert(error.response.data);\r\n      } else {\r\n        alert(\"진도율 업데이트 실패\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // 출석을 처리하는 함수\r\n  const handleAttendance = async (videoId, progress) => {\r\n    const studentId = getCurrentUserId();  // 로그인된 사용자의 ID 가져오기\r\n\r\n    try {\r\n      const token = getAuthToken();\r\n      if (!token) {\r\n        alert(\"로그인이 필요합니다.\");\r\n        return;\r\n      }\r\n\r\n      if (!studentId) {\r\n        alert(\"회원 ID가 없습니다.\");\r\n        return;\r\n      }\r\n\r\n      // 출석 처리를 위한 API 요청\r\n      const response = await axios.post(\r\n        \"http://localhost:8090/api/attendance/video\",\r\n        {\r\n          studentId: studentId,  // 회원 ID 추가\r\n          videoId: videoId,\r\n          watchedPercentage: progress,  // 시청 진도율을 사용\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: token,  // 인증 토큰 추가\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      // 출석 완료 알림을 한 번만 출력\r\n      if (!attendanceStatus[videoId]) {\r\n        alert(response.data);\r\n      }\r\n\r\n      setAttendanceStatus((prevStatus) => ({\r\n        ...prevStatus,\r\n        [videoId]: true,\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"출석 처리 실패\", error);\r\n      if (error.response) {\r\n        alert(error.response.data);\r\n      } else {\r\n        alert(\"출석 처리가 실패했습니다.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // 컴포넌트 마운트 시 비디오 목록과 출석 상태, 진도율 상태를 가져옵니다.\r\n  useEffect(() => {\r\n    fetchVideoList();\r\n    fetchProgressStatus();\r\n    fetchAttendanceStatus(); // 출석 상태도 함께 가져옵니다.\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>강의 비디오 업로드</h1>\r\n      <h2>업로드된 비디오 목록</h2>\r\n      <ul>\r\n        {videoList.map((video) => (\r\n          <li key={video.id}>\r\n            <video\r\n              width=\"300\"\r\n              controls\r\n              // 진도율을 기준으로 초기 currentTime 설정\r\n              onLoadedMetadata={(event) => {\r\n                const savedProgress = videoProgress[video.id] || 0;\r\n                const duration = event.target.duration;\r\n                const initialTime = (savedProgress / 100) * duration;\r\n                event.target.currentTime = initialTime; // 초기 시점 설정\r\n              }}\r\n              onTimeUpdate={(event) => handleTimeUpdate(event, video.id)}\r\n              onSeeking={(event) => handleSeeking(event, video.id)} // 바를 강제로 움직일 때 처리\r\n            >\r\n              <source src={`http://localhost:8090/${video.videoUrl}`} />\r\n              Your browser does not support the video tag.\r\n            </video>\r\n            <p>시청 진행률: {(videoProgress[video.id] || 0).toFixed(2)}%</p>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={attendanceStatus[video.id] || false}\r\n              readOnly\r\n            />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default KocwCoursePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}