{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIG60309\\\\react-client\\\\src\\\\components\\\\PostList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PostList() {\n  _s();\n  const {\n    boardId\n  } = useParams(); // URL에서 boardId 가져오기\n  const navigate = useNavigate();\n  const [posts, setPosts] = useState([]); // 초기값을 빈 배열로 설정\n  const [memberId, setMemberId] = useState(null);\n  const token = localStorage.getItem(\"token\"); // 로컬스토리지에서 토큰 가져오기\n\n  // ✅ 게시글 목록 가져오기 (토큰 포함)\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8090/weekly-post/board/${boardId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // 응답 데이터 확인\n        console.log(response.data);\n\n        // 게시글 데이터가 posts라는 키 안에 있을 경우 처리\n        if (response.data && Array.isArray(response.data.posts)) {\n          const simplifiedPosts = response.data.posts.map(post => ({\n            id: post.id,\n            title: post.title,\n            memberName: post.memberName,\n            // memberName을 표시\n            createdAt: post.createdAt\n          }));\n          setPosts(simplifiedPosts); // 간소화된 게시글 데이터로 상태 설정\n        } else {\n          console.error(\"게시글 데이터가 posts 키 안에 없거나 배열이 아닙니다.\", response.data);\n          setPosts([]); // 배열이 아니면 빈 배열로 설정\n        }\n      } catch (error) {\n        console.error(\"게시글 조회 실패:\", error);\n        setPosts([]); // 에러 발생 시 빈 배열로 설정\n      }\n    };\n    fetchPosts();\n  }, [boardId, token]); // boardId나 token 변경될 때마다 다시 실행\n\n  // ✅ 현재 로그인한 사용자 정보 가져오기\n  const fetchUserData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:8090/api/users/me\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setMemberId(response.data.id); // 사용자 ID 저장\n    } catch (error) {\n      console.error(\"사용자 정보 조회 실패:\", error);\n    }\n  };\n  useEffect(() => {\n    if (token) {\n      fetchUserData(); // 토큰이 있으면 사용자 정보 가져오기\n    }\n  }, [token]);\n\n  // 제목 클릭 시 PostDetail로 이동\n  const handlePostClick = (postId, boardId) => {\n    navigate(`/weekly-post/${postId}/${boardId}`); // 클릭한 게시글 ID와 boardId를 URL에 전달하여 PostDetail로 이동\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 border rounded shadow-lg bg-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"\\uAC8C\\uC2DC\\uAE00 \\uBAA9\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"w-full border-collapse border border-gray-300\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-gray-100\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border p-2\",\n            children: \"\\uBC88\\uD638\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border p-2\",\n            children: \"\\uC81C\\uBAA9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border p-2\",\n            children: \"\\uC791\\uC131\\uC790\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border p-2\",\n            children: \"\\uC791\\uC131\\uC77C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: Array.isArray(posts) && posts.length > 0 ? posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2 text-blue-500 cursor-pointer\",\n            onClick: () => handlePostClick(post.id, boardId) // 제목 클릭 시 상세 페이지로 이동\n            ,\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: post.memberName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 33\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: new Date(post.createdAt).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 33\n          }, this)]\n        }, post.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"4\",\n            className: \"text-center p-4\",\n            children: \"\\uAC8C\\uC2DC\\uAE00\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), memberId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 flex justify-end\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 text-white px-4 py-2 rounded\",\n        onClick: () => navigate(`/weekly-post/create/${boardId}`, {\n          state: {\n            memberId\n          }\n        }),\n        children: \"\\uAE00\\uC4F0\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(PostList, \"Aq0AL7Hj8hy6FdpA+8+R5H/IBO0=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","PostList","_s","boardId","navigate","posts","setPosts","memberId","setMemberId","token","localStorage","getItem","fetchPosts","response","get","headers","Authorization","console","log","data","Array","isArray","simplifiedPosts","map","post","id","title","memberName","createdAt","error","fetchUserData","handlePostClick","postId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","index","onClick","Date","toLocaleDateString","colSpan","state","_c","$RefreshReg$"],"sources":["C:/Users/BIG60309/react-client/src/components/PostList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nexport function PostList() {\r\n    const { boardId } = useParams(); // URL에서 boardId 가져오기\r\n    const navigate = useNavigate();\r\n    const [posts, setPosts] = useState([]); // 초기값을 빈 배열로 설정\r\n    const [memberId, setMemberId] = useState(null);\r\n    const token = localStorage.getItem(\"token\"); // 로컬스토리지에서 토큰 가져오기\r\n\r\n    // ✅ 게시글 목록 가져오기 (토큰 포함)\r\n    useEffect(() => {\r\n        const fetchPosts = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8090/weekly-post/board/${boardId}`, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                });\r\n\r\n                // 응답 데이터 확인\r\n                console.log(response.data);\r\n\r\n                // 게시글 데이터가 posts라는 키 안에 있을 경우 처리\r\n                if (response.data && Array.isArray(response.data.posts)) {\r\n                    const simplifiedPosts = response.data.posts.map(post => ({\r\n                        id: post.id,\r\n                        title: post.title,\r\n                        memberName: post.memberName, // memberName을 표시\r\n                        createdAt: post.createdAt,\r\n                    }));\r\n                    setPosts(simplifiedPosts); // 간소화된 게시글 데이터로 상태 설정\r\n                } else {\r\n                    console.error(\"게시글 데이터가 posts 키 안에 없거나 배열이 아닙니다.\", response.data);\r\n                    setPosts([]); // 배열이 아니면 빈 배열로 설정\r\n                }\r\n            } catch (error) {\r\n                console.error(\"게시글 조회 실패:\", error);\r\n                setPosts([]); // 에러 발생 시 빈 배열로 설정\r\n            }\r\n        };\r\n\r\n        fetchPosts();\r\n    }, [boardId, token]); // boardId나 token 변경될 때마다 다시 실행\r\n\r\n    // ✅ 현재 로그인한 사용자 정보 가져오기\r\n    const fetchUserData = async () => {\r\n        try {\r\n            const response = await axios.get(\"http://localhost:8090/api/users/me\", {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            setMemberId(response.data.id); // 사용자 ID 저장\r\n        } catch (error) {\r\n            console.error(\"사용자 정보 조회 실패:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            fetchUserData(); // 토큰이 있으면 사용자 정보 가져오기\r\n        }\r\n    }, [token]);\r\n\r\n    // 제목 클릭 시 PostDetail로 이동\r\n    const handlePostClick = (postId, boardId) => {\r\n        navigate(`/weekly-post/${postId}/${boardId}`);  // 클릭한 게시글 ID와 boardId를 URL에 전달하여 PostDetail로 이동\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-4 border rounded shadow-lg bg-white\">\r\n            <h1 className=\"text-2xl font-bold mb-4\">게시글 목록</h1>\r\n\r\n            {/* ✅ 게시글 목록 */}\r\n            <table className=\"w-full border-collapse border border-gray-300\">\r\n                <thead>\r\n                    <tr className=\"bg-gray-100\">\r\n                        <th className=\"border p-2\">번호</th>\r\n                        <th className=\"border p-2\">제목</th>\r\n                        <th className=\"border p-2\">작성자</th>\r\n                        <th className=\"border p-2\">작성일</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {Array.isArray(posts) && posts.length > 0 ? (\r\n                        posts.map((post, index) => (\r\n                            <tr key={post.id} className=\"text-center\">\r\n                                <td className=\"border p-2\">{index + 1}</td>\r\n                                <td\r\n                                    className=\"border p-2 text-blue-500 cursor-pointer\"\r\n                                    onClick={() => handlePostClick(post.id, boardId)}  // 제목 클릭 시 상세 페이지로 이동\r\n                                >\r\n                                    {post.title}\r\n                                </td>\r\n                                <td className=\"border p-2\">{post.memberName}</td> {/* memberName 표시 */}\r\n                                <td className=\"border p-2\">{new Date(post.createdAt).toLocaleDateString()}</td>\r\n                            </tr>\r\n                        ))\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan=\"4\" className=\"text-center p-4\">게시글이 없습니다.</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* ✅ \"쓰기\" 버튼 (로그인한 사용자만 가능) */}\r\n            {memberId && (\r\n                <div className=\"mt-4 flex justify-end\">\r\n                    <button\r\n                        className=\"bg-blue-500 text-white px-4 py-2 rounded\"\r\n                        onClick={() => navigate(`/weekly-post/create/${boardId}`, { state: { memberId } })}\r\n                    >\r\n                        글쓰기\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostList;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAQ,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;EACjC,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAMe,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;EAE7C;EACAhB,SAAS,CAAC,MAAM;IACZ,MAAMiB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,2CAA2CX,OAAO,EAAE,EAAE;UACnFY,OAAO,EAAE;YACLC,aAAa,EAAE,UAAUP,KAAK;UAClC;QACJ,CAAC,CAAC;;QAEF;QACAQ,OAAO,CAACC,GAAG,CAACL,QAAQ,CAACM,IAAI,CAAC;;QAE1B;QACA,IAAIN,QAAQ,CAACM,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACR,QAAQ,CAACM,IAAI,CAACd,KAAK,CAAC,EAAE;UACrD,MAAMiB,eAAe,GAAGT,QAAQ,CAACM,IAAI,CAACd,KAAK,CAACkB,GAAG,CAACC,IAAI,KAAK;YACrDC,EAAE,EAAED,IAAI,CAACC,EAAE;YACXC,KAAK,EAAEF,IAAI,CAACE,KAAK;YACjBC,UAAU,EAAEH,IAAI,CAACG,UAAU;YAAE;YAC7BC,SAAS,EAAEJ,IAAI,CAACI;UACpB,CAAC,CAAC,CAAC;UACHtB,QAAQ,CAACgB,eAAe,CAAC,CAAC,CAAC;QAC/B,CAAC,MAAM;UACHL,OAAO,CAACY,KAAK,CAAC,mCAAmC,EAAEhB,QAAQ,CAACM,IAAI,CAAC;UACjEb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QAClB;MACJ,CAAC,CAAC,OAAOuB,KAAK,EAAE;QACZZ,OAAO,CAACY,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;QAClCvB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;MAClB;IACJ,CAAC;IAEDM,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACT,OAAO,EAAEM,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEtB;EACA,MAAMqB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,MAAMjB,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,oCAAoC,EAAE;QACnEC,OAAO,EAAE;UACLC,aAAa,EAAE,UAAUP,KAAK;QAClC;MACJ,CAAC,CAAC;MACFD,WAAW,CAACK,QAAQ,CAACM,IAAI,CAACM,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZZ,OAAO,CAACY,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACzC;EACJ,CAAC;EAEDlC,SAAS,CAAC,MAAM;IACZ,IAAIc,KAAK,EAAE;MACPqB,aAAa,CAAC,CAAC,CAAC,CAAC;IACrB;EACJ,CAAC,EAAE,CAACrB,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMsB,eAAe,GAAGA,CAACC,MAAM,EAAE7B,OAAO,KAAK;IACzCC,QAAQ,CAAC,gBAAgB4B,MAAM,IAAI7B,OAAO,EAAE,CAAC,CAAC,CAAE;EACpD,CAAC;EAED,oBACIH,OAAA;IAAKiC,SAAS,EAAC,uCAAuC;IAAAC,QAAA,gBAClDlC,OAAA;MAAIiC,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGnDtC,OAAA;MAAOiC,SAAS,EAAC,+CAA+C;MAAAC,QAAA,gBAC5DlC,OAAA;QAAAkC,QAAA,eACIlC,OAAA;UAAIiC,SAAS,EAAC,aAAa;UAAAC,QAAA,gBACvBlC,OAAA;YAAIiC,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClCtC,OAAA;YAAIiC,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClCtC,OAAA;YAAIiC,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnCtC,OAAA;YAAIiC,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACRtC,OAAA;QAAAkC,QAAA,EACKd,KAAK,CAACC,OAAO,CAAChB,KAAK,CAAC,IAAIA,KAAK,CAACkC,MAAM,GAAG,CAAC,GACrClC,KAAK,CAACkB,GAAG,CAAC,CAACC,IAAI,EAAEgB,KAAK,kBAClBxC,OAAA;UAAkBiC,SAAS,EAAC,aAAa;UAAAC,QAAA,gBACrClC,OAAA;YAAIiC,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAEM,KAAK,GAAG;UAAC;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC3CtC,OAAA;YACIiC,SAAS,EAAC,yCAAyC;YACnDQ,OAAO,EAAEA,CAAA,KAAMV,eAAe,CAACP,IAAI,CAACC,EAAE,EAAEtB,OAAO,CAAE,CAAE;YAAA;YAAA+B,QAAA,EAElDV,IAAI,CAACE;UAAK;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACX,CAAC,eACLtC,OAAA;YAAIiC,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAEV,IAAI,CAACG;UAAU;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,KAAC,eAClDtC,OAAA;YAAIiC,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAE,IAAIQ,IAAI,CAAClB,IAAI,CAACI,SAAS,CAAC,CAACe,kBAAkB,CAAC;UAAC;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA,GAT1Ed,IAAI,CAACC,EAAE;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUZ,CACP,CAAC,gBAEFtC,OAAA;UAAAkC,QAAA,eACIlC,OAAA;YAAI4C,OAAO,EAAC,GAAG;YAACX,SAAS,EAAC,iBAAiB;YAAAC,QAAA,EAAC;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3D;MACP;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,EAGP/B,QAAQ,iBACLP,OAAA;MAAKiC,SAAS,EAAC,uBAAuB;MAAAC,QAAA,eAClClC,OAAA;QACIiC,SAAS,EAAC,0CAA0C;QACpDQ,OAAO,EAAEA,CAAA,KAAMrC,QAAQ,CAAC,uBAAuBD,OAAO,EAAE,EAAE;UAAE0C,KAAK,EAAE;YAAEtC;UAAS;QAAE,CAAC,CAAE;QAAA2B,QAAA,EACtF;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACpC,EAAA,CArHeD,QAAQ;EAAA,QACAL,SAAS,EACZC,WAAW;AAAA;AAAAiD,EAAA,GAFhB7C,QAAQ;AAuHxB,eAAeA,QAAQ;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}