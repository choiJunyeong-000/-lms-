{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIG60309\\\\react-client\\\\src\\\\components\\\\PostDetail.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PostDetail() {\n  _s();\n  const {\n    postId,\n    boardId\n  } = useParams(); // URL에서 postId와 boardId 가져오기\n  const [post, setPost] = useState(null); // 게시글 정보\n  const token = localStorage.getItem(\"token\"); // 로컬스토리지에서 토큰 가져오기\n  const navigate = useNavigate();\n\n  // ✅ 게시글 상세 정보 가져오기\n  const fetchPostDetail = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8090/weekly-post/${postId}/${boardId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setPost(response.data.post); // 게시글 데이터 상태에 저장\n    } catch (error) {\n      console.error(\"게시글 상세 조회 실패:\", error);\n      alert(\"게시글을 불러오는 데 실패했습니다.\");\n    }\n  };\n\n  // ✅ 로그인한 사용자 정보 가져오기\n  const fetchUserData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:8090/api/users/me\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      // 사용자 정보는 지금 코드에서 쓰이지 않지만, 필요하면 추가 작업 가능\n    } catch (error) {\n      console.error(\"사용자 정보 조회 실패:\", error);\n    }\n  };\n  useEffect(() => {\n    if (token) {\n      fetchUserData(); // 로그인 정보가 있으면 사용자 정보 가져오기\n      fetchPostDetail(); // 게시글 상세 정보 가져오기\n    }\n  }, [token, postId, boardId]); // postId나 boardId, token이 변경될 때마다 다시 실행\n\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this); // 게시글이 로드되지 않았을 때 로딩 메시지 표시\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 border rounded shadow-lg bg-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-600 mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\uC791\\uC131\\uC790: \", post.memberName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ml-4\",\n        children: [\" \\uC791\\uC131\\uC77C: \", new Date(post.createdAt).toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mb-4\",\n      children: [\"\\uB0B4\\uC6A9: \", post.content]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-end mt-4\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 text-white px-4 py-2 rounded\",\n        onClick: () => navigate(`/board/${boardId}`) // 게시판으로 돌아가기\n        ,\n        children: \"\\uBAA9\\uB85D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(PostDetail, \"DhRH/57ZL3sAz4xTLJqcmJx4TZA=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = PostDetail;\nexport default PostDetail;\nvar _c;\n$RefreshReg$(_c, \"PostDetail\");","map":{"version":3,"names":["useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","PostDetail","_s","postId","boardId","post","setPost","token","localStorage","getItem","navigate","fetchPostDetail","response","get","headers","Authorization","data","error","console","alert","fetchUserData","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","memberName","Date","createdAt","toLocaleDateString","content","onClick","_c","$RefreshReg$"],"sources":["C:/Users/BIG60309/react-client/src/components/PostDetail.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nexport function PostDetail() {\r\n    const { postId, boardId } = useParams();  // URL에서 postId와 boardId 가져오기\r\n    const [post, setPost] = useState(null);  // 게시글 정보\r\n    const token = localStorage.getItem(\"token\");  // 로컬스토리지에서 토큰 가져오기\r\n    const navigate = useNavigate();\r\n\r\n    // ✅ 게시글 상세 정보 가져오기\r\n    const fetchPostDetail = async () => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:8090/weekly-post/${postId}/${boardId}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            setPost(response.data.post);  // 게시글 데이터 상태에 저장\r\n        } catch (error) {\r\n            console.error(\"게시글 상세 조회 실패:\", error);\r\n            alert(\"게시글을 불러오는 데 실패했습니다.\");\r\n        }\r\n    };\r\n\r\n    // ✅ 로그인한 사용자 정보 가져오기\r\n    const fetchUserData = async () => {\r\n        try {\r\n            const response = await axios.get(\"http://localhost:8090/api/users/me\", {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            // 사용자 정보는 지금 코드에서 쓰이지 않지만, 필요하면 추가 작업 가능\r\n        } catch (error) {\r\n            console.error(\"사용자 정보 조회 실패:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            fetchUserData();  // 로그인 정보가 있으면 사용자 정보 가져오기\r\n            fetchPostDetail();  // 게시글 상세 정보 가져오기\r\n        }\r\n    }, [token, postId, boardId]);  // postId나 boardId, token이 변경될 때마다 다시 실행\r\n\r\n    if (!post) {\r\n        return <div>로딩 중...</div>;  // 게시글이 로드되지 않았을 때 로딩 메시지 표시\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-4 border rounded shadow-lg bg-white\">\r\n            <h1 className=\"text-2xl font-bold mb-4\">{post.title}</h1>\r\n            <div className=\"text-gray-600 mb-2\">\r\n                <span>작성자: {post.memberName}</span>\r\n                <span className=\"ml-4\"> 작성일: {new Date(post.createdAt).toLocaleDateString()}</span>\r\n            </div>\r\n            <p className=\"mb-4\">내용: {post.content}</p>\r\n\r\n            {/* 목록 버튼 */}\r\n            <div className=\"flex justify-end mt-4\">\r\n                <button\r\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded\"\r\n                    onClick={() => navigate(`/board/${boardId}`)}  // 게시판으로 돌아가기\r\n                >\r\n                    목록\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostDetail;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}